
BootloaderDFU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00007ea2  00000f76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ea2  00007000  00007000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000018  00007fa0  00007fa0  00000fd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  00007fe0  00007fe0  00000ff0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  00007ff8  00007ff8  00001008  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000001d  00800162  00800162  00001010  2**0
                  ALLOC
  6 .noinit       00000002  0080017f  0080017f  00001010  2**0
                  ALLOC
  7 .stab         00000954  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .stabstr      000000e2  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00001a46  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000340  00000000  00000000  00001a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000047ba  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000015a7  00000000  00000000  00006552  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000020f7  00000000  00000000  00007af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000006dc  00000000  00000000  00009bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001f84  00000000  00000000  0000a2cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000267f  00000000  00000000  0000c250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000530  00000000  00000000  0000e8d0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	8a c0       	rjmp	.+276    	; 0x711a <__bad_interrupt>
    7006:	00 00       	nop
    7008:	88 c0       	rjmp	.+272    	; 0x711a <__bad_interrupt>
    700a:	00 00       	nop
    700c:	86 c0       	rjmp	.+268    	; 0x711a <__bad_interrupt>
    700e:	00 00       	nop
    7010:	84 c0       	rjmp	.+264    	; 0x711a <__bad_interrupt>
    7012:	00 00       	nop
    7014:	82 c0       	rjmp	.+260    	; 0x711a <__bad_interrupt>
    7016:	00 00       	nop
    7018:	80 c0       	rjmp	.+256    	; 0x711a <__bad_interrupt>
    701a:	00 00       	nop
    701c:	7e c0       	rjmp	.+252    	; 0x711a <__bad_interrupt>
    701e:	00 00       	nop
    7020:	7c c0       	rjmp	.+248    	; 0x711a <__bad_interrupt>
    7022:	00 00       	nop
    7024:	7a c0       	rjmp	.+244    	; 0x711a <__bad_interrupt>
    7026:	00 00       	nop
    7028:	af c5       	rjmp	.+2910   	; 0x7b88 <__vector_10>
    702a:	00 00       	nop
    702c:	76 c0       	rjmp	.+236    	; 0x711a <__bad_interrupt>
    702e:	00 00       	nop
    7030:	74 c0       	rjmp	.+232    	; 0x711a <__bad_interrupt>
    7032:	00 00       	nop
    7034:	72 c0       	rjmp	.+228    	; 0x711a <__bad_interrupt>
    7036:	00 00       	nop
    7038:	70 c0       	rjmp	.+224    	; 0x711a <__bad_interrupt>
    703a:	00 00       	nop
    703c:	6e c0       	rjmp	.+220    	; 0x711a <__bad_interrupt>
    703e:	00 00       	nop
    7040:	6c c0       	rjmp	.+216    	; 0x711a <__bad_interrupt>
    7042:	00 00       	nop
    7044:	6a c0       	rjmp	.+212    	; 0x711a <__bad_interrupt>
    7046:	00 00       	nop
    7048:	68 c0       	rjmp	.+208    	; 0x711a <__bad_interrupt>
    704a:	00 00       	nop
    704c:	66 c0       	rjmp	.+204    	; 0x711a <__bad_interrupt>
    704e:	00 00       	nop
    7050:	df c1       	rjmp	.+958    	; 0x7410 <__vector_20>
    7052:	00 00       	nop
    7054:	62 c0       	rjmp	.+196    	; 0x711a <__bad_interrupt>
    7056:	00 00       	nop
    7058:	60 c0       	rjmp	.+192    	; 0x711a <__bad_interrupt>
    705a:	00 00       	nop
    705c:	5e c0       	rjmp	.+188    	; 0x711a <__bad_interrupt>
    705e:	00 00       	nop
    7060:	5c c0       	rjmp	.+184    	; 0x711a <__bad_interrupt>
    7062:	00 00       	nop
    7064:	5a c0       	rjmp	.+180    	; 0x711a <__bad_interrupt>
    7066:	00 00       	nop
    7068:	58 c0       	rjmp	.+176    	; 0x711a <__bad_interrupt>
    706a:	00 00       	nop
    706c:	56 c0       	rjmp	.+172    	; 0x711a <__bad_interrupt>
    706e:	00 00       	nop
    7070:	54 c0       	rjmp	.+168    	; 0x711a <__bad_interrupt>
    7072:	00 00       	nop
    7074:	52 c0       	rjmp	.+164    	; 0x711a <__bad_interrupt>
    7076:	00 00       	nop
    7078:	50 c0       	rjmp	.+160    	; 0x711a <__bad_interrupt>
    707a:	00 00       	nop
    707c:	4e c0       	rjmp	.+156    	; 0x711a <__bad_interrupt>
    707e:	00 00       	nop
    7080:	4c c0       	rjmp	.+152    	; 0x711a <__bad_interrupt>
    7082:	00 00       	nop
    7084:	4a c0       	rjmp	.+148    	; 0x711a <__bad_interrupt>
    7086:	00 00       	nop
    7088:	48 c0       	rjmp	.+144    	; 0x711a <__bad_interrupt>
    708a:	00 00       	nop
    708c:	46 c0       	rjmp	.+140    	; 0x711a <__bad_interrupt>
    708e:	00 00       	nop
    7090:	44 c0       	rjmp	.+136    	; 0x711a <__bad_interrupt>
    7092:	00 00       	nop
    7094:	42 c0       	rjmp	.+132    	; 0x711a <__bad_interrupt>
    7096:	00 00       	nop
    7098:	40 c0       	rjmp	.+128    	; 0x711a <__bad_interrupt>
    709a:	00 00       	nop
    709c:	3e c0       	rjmp	.+124    	; 0x711a <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	3c c0       	rjmp	.+120    	; 0x711a <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	3a c0       	rjmp	.+116    	; 0x711a <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	38 c0       	rjmp	.+112    	; 0x711a <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <Application_Jump_Check>:
/** Special startup routine to check if the bootloader was started via a watchdog reset, and if the magic application
 *  start key has been loaded into \ref MagicBootKey. If the bootloader started via the watchdog and the key is valid,
 *  this will force the user application to start via a software jump.
 */
void Application_Jump_Check(void)
{
    70b8:	04 b6       	in	r0, 0x34	; 52
    70ba:	03 fe       	sbrs	r0, 3
    70bc:	19 c0       	rjmp	.+50     	; 0x70f0 <__do_copy_data>
		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#endif

	/* If the reset source was the bootloader and the key is correct, clear it and jump to the application */
	if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
    70be:	80 91 7f 01 	lds	r24, 0x017F
    70c2:	90 91 80 01 	lds	r25, 0x0180
    70c6:	82 34       	cpi	r24, 0x42	; 66
    70c8:	9c 4d       	sbci	r25, 0xDC	; 220
    70ca:	91 f4       	brne	.+36     	; 0x70f0 <__do_copy_data>

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication)
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1<<WDRF);
    70cc:	84 b7       	in	r24, 0x34	; 52
    70ce:	87 7f       	andi	r24, 0xF7	; 247
    70d0:	84 bf       	out	0x34, r24	; 52
		wdt_disable(); 
    70d2:	88 e1       	ldi	r24, 0x18	; 24
    70d4:	0f b6       	in	r0, 0x3f	; 63
    70d6:	f8 94       	cli
    70d8:	80 93 60 00 	sts	0x0060, r24
    70dc:	10 92 60 00 	sts	0x0060, r1
    70e0:	0f be       	out	0x3f, r0	; 63

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
    70e2:	10 92 80 01 	sts	0x0180, r1
    70e6:	10 92 7f 01 	sts	0x017F, r1

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
    70ea:	e0 e0       	ldi	r30, 0x00	; 0
    70ec:	f0 e0       	ldi	r31, 0x00	; 0
    70ee:	09 95       	icall

000070f0 <__do_copy_data>:
    70f0:	11 e0       	ldi	r17, 0x01	; 1
    70f2:	a0 e0       	ldi	r26, 0x00	; 0
    70f4:	b1 e0       	ldi	r27, 0x01	; 1
    70f6:	e2 ea       	ldi	r30, 0xA2	; 162
    70f8:	fe e7       	ldi	r31, 0x7E	; 126
    70fa:	02 c0       	rjmp	.+4      	; 0x7100 <__do_copy_data+0x10>
    70fc:	05 90       	lpm	r0, Z+
    70fe:	0d 92       	st	X+, r0
    7100:	a2 36       	cpi	r26, 0x62	; 98
    7102:	b1 07       	cpc	r27, r17
    7104:	d9 f7       	brne	.-10     	; 0x70fc <__do_copy_data+0xc>

00007106 <__do_clear_bss>:
    7106:	11 e0       	ldi	r17, 0x01	; 1
    7108:	a2 e6       	ldi	r26, 0x62	; 98
    710a:	b1 e0       	ldi	r27, 0x01	; 1
    710c:	01 c0       	rjmp	.+2      	; 0x7110 <.do_clear_bss_start>

0000710e <.do_clear_bss_loop>:
    710e:	1d 92       	st	X+, r1

00007110 <.do_clear_bss_start>:
    7110:	af 37       	cpi	r26, 0x7F	; 127
    7112:	b1 07       	cpc	r27, r17
    7114:	e1 f7       	brne	.-8      	; 0x710e <.do_clear_bss_loop>
    7116:	36 d1       	rcall	.+620    	; 0x7384 <main>
    7118:	c2 c6       	rjmp	.+3460   	; 0x7e9e <_exit>

0000711a <__bad_interrupt>:
    711a:	72 cf       	rjmp	.-284    	; 0x7000 <__vectors>

0000711c <DiscardFillerBytes>:
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
    711c:	1b c0       	rjmp	.+54     	; 0x7154 <DiscardFillerBytes+0x38>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    711e:	40 91 f3 00 	lds	r20, 0x00F3
    7122:	90 91 f2 00 	lds	r25, 0x00F2
    7126:	34 2f       	mov	r19, r20
    7128:	20 e0       	ldi	r18, 0x00	; 0
    712a:	a9 01       	movw	r20, r18
    712c:	49 2b       	or	r20, r25
	{
		if (!(Endpoint_BytesInEndpoint()))
    712e:	45 2b       	or	r20, r21
    7130:	71 f4       	brne	.+28     	; 0x714e <DiscardFillerBytes+0x32>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    7132:	90 91 e8 00 	lds	r25, 0x00E8
    7136:	9b 7f       	andi	r25, 0xFB	; 251
    7138:	90 93 e8 00 	sts	0x00E8, r25
    713c:	03 c0       	rjmp	.+6      	; 0x7144 <DiscardFillerBytes+0x28>
			Endpoint_ClearOUT();

			/* Wait until next data packet received */
			while (!(Endpoint_IsOUTReceived()))
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
    713e:	9e b3       	in	r25, 0x1e	; 30
    7140:	99 23       	and	r25, r25
    7142:	51 f0       	breq	.+20     	; 0x7158 <DiscardFillerBytes+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7144:	90 91 e8 00 	lds	r25, 0x00E8
		if (!(Endpoint_BytesInEndpoint()))
		{
			Endpoint_ClearOUT();

			/* Wait until next data packet received */
			while (!(Endpoint_IsOUTReceived()))
    7148:	92 ff       	sbrs	r25, 2
    714a:	f9 cf       	rjmp	.-14     	; 0x713e <DiscardFillerBytes+0x22>
    714c:	02 c0       	rjmp	.+4      	; 0x7152 <DiscardFillerBytes+0x36>
			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
    714e:	90 91 f1 00 	lds	r25, 0x00F1
    7152:	81 50       	subi	r24, 0x01	; 1
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
    7154:	81 11       	cpse	r24, r1
    7156:	e3 cf       	rjmp	.-58     	; 0x711e <DiscardFillerBytes+0x2>
    7158:	08 95       	ret

0000715a <LoadStartEndAddresses>:
{
	union
	{
		uint8_t  Bytes[2];
		uint16_t Word;
	} Address[2] = {{.Bytes = {SentCommand.Data[2], SentCommand.Data[1]}},
    715a:	30 91 6a 01 	lds	r19, 0x016A
    715e:	20 91 69 01 	lds	r18, 0x0169
	                {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}}};

	/* Load in the start and ending read addresses from the sent data packet */
	StartAddr = Address[0].Word;
    7162:	90 91 68 01 	lds	r25, 0x0168
    7166:	80 91 67 01 	lds	r24, 0x0167
    716a:	90 93 6d 01 	sts	0x016D, r25
    716e:	80 93 6e 01 	sts	0x016E, r24
	EndAddr   = Address[1].Word;
    7172:	c9 01       	movw	r24, r18
    7174:	90 93 6f 01 	sts	0x016F, r25
    7178:	80 93 70 01 	sts	0x0170, r24
    717c:	08 95       	ret

0000717e <ProcessBootloaderCommand>:
/** Routine to process an issued command from the host, via a DFU_DNLOAD request wrapper. This routine ensures
 *  that the command is allowed based on the current secure mode flag value, and passes the command off to the
 *  appropriate handler function.
 */
static void ProcessBootloaderCommand(void)
{
    717e:	1f 93       	push	r17
    7180:	cf 93       	push	r28
    7182:	df 93       	push	r29
    7184:	00 d0       	rcall	.+0      	; 0x7186 <ProcessBootloaderCommand+0x8>
    7186:	00 d0       	rcall	.+0      	; 0x7188 <ProcessBootloaderCommand+0xa>
    7188:	00 d0       	rcall	.+0      	; 0x718a <ProcessBootloaderCommand+0xc>
    718a:	cd b7       	in	r28, 0x3d	; 61
    718c:	de b7       	in	r29, 0x3e	; 62
	/* Check if device is in secure mode */
	if (IsSecure)
    718e:	80 91 74 01 	lds	r24, 0x0174
    7192:	88 23       	and	r24, r24
    7194:	d9 f0       	breq	.+54     	; 0x71cc <ProcessBootloaderCommand+0x4e>
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
    7196:	80 91 65 01 	lds	r24, 0x0165
    719a:	84 30       	cpi	r24, 0x04	; 4
    719c:	49 f4       	brne	.+18     	; 0x71b0 <ProcessBootloaderCommand+0x32>
    719e:	80 91 66 01 	lds	r24, 0x0166
    71a2:	81 11       	cpse	r24, r1
    71a4:	07 c0       	rjmp	.+14     	; 0x71b4 <ProcessBootloaderCommand+0x36>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
    71a6:	80 91 67 01 	lds	r24, 0x0167
    71aa:	8f 3f       	cpi	r24, 0xFF	; 255
    71ac:	19 f4       	brne	.+6      	; 0x71b4 <ProcessBootloaderCommand+0x36>
    71ae:	0e c0       	rjmp	.+28     	; 0x71cc <ProcessBootloaderCommand+0x4e>
{
	/* Check if device is in secure mode */
	if (IsSecure)
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
    71b0:	85 30       	cpi	r24, 0x05	; 5
    71b2:	61 f0       	breq	.+24     	; 0x71cc <ProcessBootloaderCommand+0x4e>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
			   (SentCommand.Command == COMMAND_READ)))
		{
			/* Set the state and status variables to indicate the error */
			DFU_State  = dfuERROR;
    71b4:	8a e0       	ldi	r24, 0x0A	; 10
    71b6:	80 93 01 01 	sts	0x0101, r24
			DFU_Status = errWRITE;
    71ba:	83 e0       	ldi	r24, 0x03	; 3
    71bc:	80 93 73 01 	sts	0x0173, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    71c0:	80 91 eb 00 	lds	r24, 0x00EB
    71c4:	80 62       	ori	r24, 0x20	; 32
    71c6:	80 93 eb 00 	sts	0x00EB, r24
    71ca:	d2 c0       	rjmp	.+420    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
			return;
		}
	}

	/* Dispatch the required command processing routine based on the command type */
	switch (SentCommand.Command)
    71cc:	80 91 65 01 	lds	r24, 0x0165
    71d0:	84 30       	cpi	r24, 0x04	; 4
    71d2:	09 f4       	brne	.+2      	; 0x71d6 <ProcessBootloaderCommand+0x58>
    71d4:	4a c0       	rjmp	.+148    	; 0x726a <ProcessBootloaderCommand+0xec>
    71d6:	30 f4       	brcc	.+12     	; 0x71e4 <ProcessBootloaderCommand+0x66>
    71d8:	81 30       	cpi	r24, 0x01	; 1
    71da:	59 f0       	breq	.+22     	; 0x71f2 <ProcessBootloaderCommand+0x74>
    71dc:	83 30       	cpi	r24, 0x03	; 3
    71de:	09 f0       	breq	.+2      	; 0x71e2 <ProcessBootloaderCommand+0x64>
    71e0:	c7 c0       	rjmp	.+398    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    71e2:	1d c0       	rjmp	.+58     	; 0x721e <ProcessBootloaderCommand+0xa0>
    71e4:	85 30       	cpi	r24, 0x05	; 5
    71e6:	09 f4       	brne	.+2      	; 0x71ea <ProcessBootloaderCommand+0x6c>
    71e8:	96 c0       	rjmp	.+300    	; 0x7316 <ProcessBootloaderCommand+0x198>
    71ea:	86 30       	cpi	r24, 0x06	; 6
    71ec:	09 f0       	breq	.+2      	; 0x71f0 <ProcessBootloaderCommand+0x72>
    71ee:	c0 c0       	rjmp	.+384    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    71f0:	b3 c0       	rjmp	.+358    	; 0x7358 <ProcessBootloaderCommand+0x1da>
/** Handler for a Memory Program command issued by the host. This routine handles the preparations needed
 *  to write subsequent data from the host into the specified memory.
 */
static void ProcessMemProgCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Write FLASH command
    71f2:	10 91 66 01 	lds	r17, 0x0166
    71f6:	12 30       	cpi	r17, 0x02	; 2
    71f8:	08 f0       	brcs	.+2      	; 0x71fc <ProcessBootloaderCommand+0x7e>
    71fa:	ba c0       	rjmp	.+372    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
	    IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                            // Write EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
    71fc:	ae df       	rcall	.-164    	; 0x715a <LoadStartEndAddresses>
    71fe:	11 11       	cpse	r17, r1

		/* If FLASH is being written to, we need to pre-erase the first page to write to */
		if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))
    7200:	0c c0       	rjmp	.+24     	; 0x721a <ProcessBootloaderCommand+0x9c>
    7202:	80 91 6d 01 	lds	r24, 0x016D
		{
			union
			{
				uint16_t Words[2];
				uint32_t Long;
			} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
    7206:	90 91 6e 01 	lds	r25, 0x016E
    720a:	23 e0       	ldi	r18, 0x03	; 3

			/* Erase the current page's temp buffer */
			boot_page_erase(CurrFlashAddress.Long);
    720c:	fc 01       	movw	r30, r24
    720e:	20 93 57 00 	sts	0x0057, r18
    7212:	e8 95       	spm
    7214:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
    7216:	00 fc       	sbrc	r0, 0
    7218:	fd cf       	rjmp	.-6      	; 0x7214 <ProcessBootloaderCommand+0x96>
    721a:	85 e0       	ldi	r24, 0x05	; 5
		}

		/* Set the state so that the next DNLOAD requests reads in the firmware */
		DFU_State = dfuDNLOAD_IDLE;
    721c:	08 c0       	rjmp	.+16     	; 0x722e <ProcessBootloaderCommand+0xb0>
    721e:	80 91 66 01 	lds	r24, 0x0166
 *  to read subsequent data from the specified memory out to the host, as well as implementing the memory
 *  blank check command.
 */
static void ProcessMemReadCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Read FLASH command
    7222:	88 23       	and	r24, r24
    7224:	11 f0       	breq	.+4      	; 0x722a <ProcessBootloaderCommand+0xac>
    7226:	82 30       	cpi	r24, 0x02	; 2
    7228:	29 f4       	brne	.+10     	; 0x7234 <ProcessBootloaderCommand+0xb6>
    722a:	97 df       	rcall	.-210    	; 0x715a <LoadStartEndAddresses>
        IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))                            // Read EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
    722c:	89 e0       	ldi	r24, 0x09	; 9
    722e:	80 93 01 01 	sts	0x0101, r24

		/* Set the state so that the next UPLOAD requests read out the firmware */
		DFU_State = dfuUPLOAD_IDLE;
    7232:	9e c0       	rjmp	.+316    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    7234:	81 30       	cpi	r24, 0x01	; 1
    7236:	09 f0       	breq	.+2      	; 0x723a <ProcessBootloaderCommand+0xbc>
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
    7238:	9b c0       	rjmp	.+310    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    723a:	e0 e0       	ldi	r30, 0x00	; 0
    723c:	f0 e0       	ldi	r31, 0x00	; 0
    723e:	84 91       	lpm	r24, Z+
    7240:	8f 3f       	cpi	r24, 0xFF	; 255
		{
			/* Check if the current byte is not blank */
			#if (FLASHEND > 0xFFFF)
			if (pgm_read_byte_far(CurrFlashAddress) != 0xFF)
			#else
			if (pgm_read_byte(CurrFlashAddress) != 0xFF)
    7242:	69 f0       	breq	.+26     	; 0x725e <ProcessBootloaderCommand+0xe0>
    7244:	10 92 71 01 	sts	0x0171, r1
			#endif
			{
				/* Save the location of the first non-blank byte for response back to the host */
				Flash64KBPage = (CurrFlashAddress >> 16);
    7248:	f0 93 6e 01 	sts	0x016E, r31
				StartAddr     = CurrFlashAddress;
    724c:	e0 93 6d 01 	sts	0x016D, r30
    7250:	8a e0       	ldi	r24, 0x0A	; 10
    7252:	80 93 01 01 	sts	0x0101, r24

				/* Set state and status variables to the appropriate error values */
				DFU_State  = dfuERROR;
    7256:	85 e0       	ldi	r24, 0x05	; 5
    7258:	80 93 73 01 	sts	0x0173, r24
				DFU_Status = errCHECK_ERASED;
    725c:	89 c0       	rjmp	.+274    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    725e:	31 96       	adiw	r30, 0x01	; 1
    7260:	e1 15       	cp	r30, r1
    7262:	20 e7       	ldi	r18, 0x70	; 112
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
	{
		uint32_t CurrFlashAddress = 0;

		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
    7264:	f2 07       	cpc	r31, r18
    7266:	59 f7       	brne	.-42     	; 0x723e <ProcessBootloaderCommand+0xc0>
    7268:	83 c0       	rjmp	.+262    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    726a:	80 91 66 01 	lds	r24, 0x0166
/** Handler for a Data Write command issued by the host. This routine handles non-programming commands such as
 *  bootloader exit (both via software jumps and hardware watchdog resets) and flash memory erasure.
 */
static void ProcessWriteCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x03))                            // Start application
    726e:	83 30       	cpi	r24, 0x03	; 3
    7270:	71 f5       	brne	.+92     	; 0x72ce <ProcessBootloaderCommand+0x150>
    7272:	81 e0       	ldi	r24, 0x01	; 1
    7274:	80 93 62 01 	sts	0x0162, r24
	{
		/* Indicate that the bootloader is terminating */
		WaitForExit = true;
    7278:	80 91 6b 01 	lds	r24, 0x016B

		/* Check if data supplied for the Start Program command - no data executes the program */
		if (SentCommand.DataSize)
    727c:	90 91 6c 01 	lds	r25, 0x016C
    7280:	20 91 67 01 	lds	r18, 0x0167
    7284:	89 2b       	or	r24, r25
    7286:	61 f0       	breq	.+24     	; 0x72a0 <ProcessBootloaderCommand+0x122>
    7288:	21 30       	cpi	r18, 0x01	; 1
    728a:	09 f0       	breq	.+2      	; 0x728e <ProcessBootloaderCommand+0x110>
		{
			if (SentCommand.Data[1] == 0x01)                                   // Start via jump
    728c:	71 c0       	rjmp	.+226    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    728e:	90 91 6a 01 	lds	r25, 0x016A
			{
				union
				{
					uint8_t  Bytes[2];
					AppPtr_t FuncPtr;
				} Address = {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}};
    7292:	80 91 69 01 	lds	r24, 0x0169
    7296:	90 93 63 01 	sts	0x0163, r25

				/* Load in the jump address into the application start address pointer */
				AppStartPtr = Address.FuncPtr;
    729a:	80 93 64 01 	sts	0x0164, r24
    729e:	68 c0       	rjmp	.+208    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    72a0:	21 11       	cpse	r18, r1
    72a2:	12 c0       	rjmp	.+36     	; 0x72c8 <ProcessBootloaderCommand+0x14a>
			}
		}
		else
		{
			if (SentCommand.Data[1] == 0x00)                                   // Start via watchdog
    72a4:	82 e4       	ldi	r24, 0x42	; 66
    72a6:	9c ed       	ldi	r25, 0xDC	; 220
			{
				/* Unlock the forced application start mode of the bootloader if it is restarted */
				MagicBootKey = MAGIC_BOOT_KEY;
    72a8:	90 93 80 01 	sts	0x0180, r25
    72ac:	80 93 7f 01 	sts	0x017F, r24
    72b0:	2c e0       	ldi	r18, 0x0C	; 12
    72b2:	88 e1       	ldi	r24, 0x18	; 24

				/* Start the watchdog to reset the AVR once the communications are finalized */
				wdt_enable(WDTO_250MS);
    72b4:	90 e0       	ldi	r25, 0x00	; 0
    72b6:	0f b6       	in	r0, 0x3f	; 63
    72b8:	f8 94       	cli
    72ba:	a8 95       	wdr
    72bc:	80 93 60 00 	sts	0x0060, r24
    72c0:	0f be       	out	0x3f, r0	; 63
    72c2:	20 93 60 00 	sts	0x0060, r18
    72c6:	54 c0       	rjmp	.+168    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    72c8:	10 92 00 01 	sts	0x0100, r1
			}
			else                                                               // Start via jump
			{
				/* Set the flag to terminate the bootloader at next opportunity */
				RunBootloader = false;
    72cc:	51 c0       	rjmp	.+162    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    72ce:	81 11       	cpse	r24, r1
    72d0:	4f c0       	rjmp	.+158    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
			}
		}
	}
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
    72d2:	80 91 67 01 	lds	r24, 0x0167
    72d6:	8f 3f       	cpi	r24, 0xFF	; 255
    72d8:	09 f0       	breq	.+2      	; 0x72dc <ProcessBootloaderCommand+0x15e>
    72da:	4a c0       	rjmp	.+148    	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    72dc:	e0 e0       	ldi	r30, 0x00	; 0
    72de:	f0 e0       	ldi	r31, 0x00	; 0
    72e0:	83 e0       	ldi	r24, 0x03	; 3
    72e2:	95 e0       	ldi	r25, 0x05	; 5
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
		{
			boot_page_erase(CurrFlashAddress);
    72e4:	80 93 57 00 	sts	0x0057, r24
    72e8:	e8 95       	spm
    72ea:	07 b6       	in	r0, 0x37	; 55
    72ec:	00 fc       	sbrc	r0, 0
			boot_spm_busy_wait();
    72ee:	fd cf       	rjmp	.-6      	; 0x72ea <ProcessBootloaderCommand+0x16c>
    72f0:	90 93 57 00 	sts	0x0057, r25
			boot_page_write(CurrFlashAddress);
    72f4:	e8 95       	spm
    72f6:	07 b6       	in	r0, 0x37	; 55
    72f8:	00 fc       	sbrc	r0, 0
			boot_spm_busy_wait();
    72fa:	fd cf       	rjmp	.-6      	; 0x72f6 <ProcessBootloaderCommand+0x178>
    72fc:	e0 58       	subi	r30, 0x80	; 128
    72fe:	ff 4f       	sbci	r31, 0xFF	; 255
    7300:	e1 15       	cp	r30, r1
    7302:	20 e7       	ldi	r18, 0x70	; 112
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
	{
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
    7304:	f2 07       	cpc	r31, r18
    7306:	71 f7       	brne	.-36     	; 0x72e4 <ProcessBootloaderCommand+0x166>
    7308:	81 e1       	ldi	r24, 0x11	; 17
    730a:	80 93 57 00 	sts	0x0057, r24

			CurrFlashAddress += SPM_PAGESIZE;
		}

		/* Re-enable the RWW section of flash as writing to the flash locks it out */
		boot_rww_enable();
    730e:	e8 95       	spm
    7310:	10 92 74 01 	sts	0x0174, r1

		/* Memory has been erased, reset the security bit so that programming/reading is allowed */
		IsSecure = false;
    7314:	2d c0       	rjmp	.+90     	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    7316:	80 e2       	ldi	r24, 0x20	; 32
    7318:	8c 83       	std	Y+4, r24	; 0x04
/** Handler for a Data Read command issued by the host. This routine handles bootloader information retrieval
 *  commands such as device signature and bootloader version retrieval.
 */
static void ProcessReadCommand(void)
{
	const uint8_t BootloaderInfo[3] = {BOOTLOADER_VERSION, BOOTLOADER_ID_BYTE1, BOOTLOADER_ID_BYTE2};
    731a:	8c ed       	ldi	r24, 0xDC	; 220
    731c:	8d 83       	std	Y+5, r24	; 0x05
    731e:	8b ef       	ldi	r24, 0xFB	; 251
    7320:	8e 83       	std	Y+6, r24	; 0x06
    7322:	8e e1       	ldi	r24, 0x1E	; 30
    7324:	89 83       	std	Y+1, r24	; 0x01
	const uint8_t SignatureInfo[3]  = {AVR_SIGNATURE_1,    AVR_SIGNATURE_2,     AVR_SIGNATURE_3};
    7326:	85 e9       	ldi	r24, 0x95	; 149
    7328:	8a 83       	std	Y+2, r24	; 0x02
    732a:	87 e8       	ldi	r24, 0x87	; 135
    732c:	8b 83       	std	Y+3, r24	; 0x03
    732e:	80 91 67 01 	lds	r24, 0x0167

	uint8_t DataIndexToRead = SentCommand.Data[1];
    7332:	90 91 66 01 	lds	r25, 0x0166

	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))                         // Read bootloader info
    7336:	91 11       	cpse	r25, r1
    7338:	05 c0       	rjmp	.+10     	; 0x7344 <ProcessBootloaderCommand+0x1c6>
    733a:	fe 01       	movw	r30, r28
    733c:	e8 0f       	add	r30, r24
	  ResponseByte = BootloaderInfo[DataIndexToRead];
    733e:	f1 1d       	adc	r31, r1
    7340:	84 81       	ldd	r24, Z+4	; 0x04
    7342:	07 c0       	rjmp	.+14     	; 0x7352 <ProcessBootloaderCommand+0x1d4>
    7344:	91 30       	cpi	r25, 0x01	; 1
    7346:	a1 f4       	brne	.+40     	; 0x7370 <ProcessBootloaderCommand+0x1f2>
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                    // Read signature byte
    7348:	fe 01       	movw	r30, r28
    734a:	bf 97       	sbiw	r30, 0x2f	; 47
	  ResponseByte = SignatureInfo[DataIndexToRead - 0x30];
    734c:	e8 0f       	add	r30, r24
    734e:	f1 1d       	adc	r31, r1
    7350:	80 81       	ld	r24, Z
    7352:	80 93 72 01 	sts	0x0172, r24
    7356:	0c c0       	rjmp	.+24     	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    7358:	80 91 66 01 	lds	r24, 0x0166
			break;
		case COMMAND_READ:
			ProcessReadCommand();
			break;
		case COMMAND_CHANGE_BASE_ADDR:
			if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x03, 0x00))              // Set 64KB flash page command
    735c:	83 30       	cpi	r24, 0x03	; 3
    735e:	41 f4       	brne	.+16     	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    7360:	80 91 67 01 	lds	r24, 0x0167
    7364:	81 11       	cpse	r24, r1
    7366:	04 c0       	rjmp	.+8      	; 0x7370 <ProcessBootloaderCommand+0x1f2>
    7368:	80 91 68 01 	lds	r24, 0x0168
			  Flash64KBPage = SentCommand.Data[2];
    736c:	80 93 71 01 	sts	0x0171, r24
    7370:	26 96       	adiw	r28, 0x06	; 6
    7372:	0f b6       	in	r0, 0x3f	; 63

			break;
	}
}
    7374:	f8 94       	cli
    7376:	de bf       	out	0x3e, r29	; 62
    7378:	0f be       	out	0x3f, r0	; 63
    737a:	cd bf       	out	0x3d, r28	; 61
    737c:	df 91       	pop	r29
    737e:	cf 91       	pop	r28
    7380:	1f 91       	pop	r17
    7382:	08 95       	ret

00007384 <main>:
		MagicBootKey = 0;

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
	}
}
    7384:	84 b7       	in	r24, 0x34	; 52
    7386:	87 7f       	andi	r24, 0xF7	; 247
    7388:	84 bf       	out	0x34, r24	; 52
/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
	wdt_disable();
    738a:	88 e1       	ldi	r24, 0x18	; 24
    738c:	0f b6       	in	r0, 0x3f	; 63
    738e:	f8 94       	cli
    7390:	80 93 60 00 	sts	0x0060, r24
    7394:	10 92 60 00 	sts	0x0060, r1
    7398:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    739a:	90 e0       	ldi	r25, 0x00	; 0
    739c:	80 e8       	ldi	r24, 0x80	; 128
    739e:	0f b6       	in	r0, 0x3f	; 63
    73a0:	f8 94       	cli
    73a2:	80 93 61 00 	sts	0x0061, r24
    73a6:	90 93 61 00 	sts	0x0061, r25
    73aa:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    73ac:	c1 e0       	ldi	r28, 0x01	; 1
    73ae:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
    73b0:	82 e0       	ldi	r24, 0x02	; 2
    73b2:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
    73b4:	cc d3       	rcall	.+1944   	; 0x7b4e <USB_Init>
    73b6:	8a b1       	in	r24, 0x0a	; 10

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
    73b8:	80 6f       	ori	r24, 0xF0	; 240
    73ba:	8a b9       	out	0x0a, r24	; 10
    73bc:	8b b1       	in	r24, 0x0b	; 11
				PORTD &= ~LEDS_ALL_LEDS;
    73be:	8f 70       	andi	r24, 0x0F	; 15
    73c0:	8b b9       	out	0x0b, r24	; 11
    73c2:	c0 93 6f 00 	sts	0x006F, r28
	LEDs_Init();

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
    73c6:	83 e0       	ldi	r24, 0x03	; 3
	TCCR1B = ((1 << CS11) | (1 << CS10));
    73c8:	80 93 81 00 	sts	0x0081, r24
    73cc:	8b b1       	in	r24, 0x0b	; 11
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
    73ce:	8f 70       	andi	r24, 0x0F	; 15
    73d0:	80 61       	ori	r24, 0x10	; 16
    73d2:	8b b9       	out	0x0b, r24	; 11
    73d4:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    73d6:	01 c0       	rjmp	.+2      	; 0x73da <main+0x56>
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
    73d8:	44 d5       	rcall	.+2696   	; 0x7e62 <USB_USBTask>
	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
	  USB_USBTask();
    73da:	80 91 00 01 	lds	r24, 0x0100

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
    73de:	81 11       	cpse	r24, r1
    73e0:	fb cf       	rjmp	.-10     	; 0x73d8 <main+0x54>
    73e2:	80 91 62 01 	lds	r24, 0x0162
    73e6:	81 11       	cpse	r24, r1
    73e8:	f7 cf       	rjmp	.-18     	; 0x73d8 <main+0x54>
    73ea:	5e d3       	rcall	.+1724   	; 0x7aa8 <USB_Disable>
    73ec:	8a b1       	in	r24, 0x0a	; 10

/** Resets all configured hardware required for the bootloader back to their original states. */
static void ResetHardware(void)
{
	/* Shut down the USB and other board hardware drivers */
	USB_Disable();
    73ee:	8f 70       	andi	r24, 0x0F	; 15
    73f0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
			}

			static inline void LEDs_Disable(void)
			{
				DDRD  &= ~LEDS_ALL_LEDS;
    73f2:	8b b1       	in	r24, 0x0b	; 11
    73f4:	8f 70       	andi	r24, 0x0F	; 15
    73f6:	8b b9       	out	0x0b, r24	; 11
				PORTD &= ~LEDS_ALL_LEDS;
    73f8:	10 92 6f 00 	sts	0x006F, r1
    73fc:	10 92 81 00 	sts	0x0081, r1
	LEDs_Disable();
	
	/* Disable Bootloader active LED toggle timer */
	TIMSK1 = 0;
    7400:	81 e0       	ldi	r24, 0x01	; 1
	TCCR1B = 0;
    7402:	85 bf       	out	0x35, r24	; 53
    7404:	15 be       	out	0x35, r1	; 53

	/* Relocate the interrupt vector table back to the application section */
	MCUCR = (1 << IVCE);
    7406:	e0 91 63 01 	lds	r30, 0x0163
	MCUCR = 0;
    740a:	f0 91 64 01 	lds	r31, 0x0164

	/* Reset configured hardware back to their original states for the user application */
	ResetHardware();

	/* Start the user application */
	AppStartPtr();
    740e:	09 95       	icall

00007410 <__vector_20>:
	MCUCR = 0;
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    7410:	1f 92       	push	r1
    7412:	0f 92       	push	r0
    7414:	0f b6       	in	r0, 0x3f	; 63
    7416:	0f 92       	push	r0
    7418:	11 24       	eor	r1, r1
    741a:	8f 93       	push	r24
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
    741c:	80 e3       	ldi	r24, 0x30	; 48
    741e:	89 b9       	out	0x09, r24	; 9
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
    7420:	8f 91       	pop	r24
    7422:	0f 90       	pop	r0
    7424:	0f be       	out	0x3f, r0	; 63
    7426:	0f 90       	pop	r0
    7428:	1f 90       	pop	r1
    742a:	18 95       	reti

0000742c <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    742c:	af 92       	push	r10
    742e:	bf 92       	push	r11
    7430:	cf 92       	push	r12
    7432:	df 92       	push	r13
    7434:	ef 92       	push	r14
    7436:	ff 92       	push	r15
    7438:	0f 93       	push	r16
    743a:	1f 93       	push	r17
    743c:	cf 93       	push	r28
    743e:	df 93       	push	r29
	/* Ignore any requests that aren't directed to the DFU interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    7440:	80 91 77 01 	lds	r24, 0x0177
    7444:	8f 77       	andi	r24, 0x7F	; 127
    7446:	81 32       	cpi	r24, 0x21	; 33
    7448:	09 f0       	breq	.+2      	; 0x744c <EVENT_USB_Device_ControlRequest+0x20>
    744a:	0f c2       	rjmp	.+1054   	; 0x786a <EVENT_USB_Device_ControlRequest+0x43e>
    744c:	80 e3       	ldi	r24, 0x30	; 48
    744e:	89 b9       	out	0x09, r24	; 9

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Get the size of the command and data from the wLength value */
	SentCommand.DataSize = USB_ControlRequest.wLength;
    7450:	80 91 7d 01 	lds	r24, 0x017D
    7454:	90 91 7e 01 	lds	r25, 0x017E
    7458:	90 93 6c 01 	sts	0x016C, r25
    745c:	80 93 6b 01 	sts	0x016B, r24

	switch (USB_ControlRequest.bRequest)
    7460:	80 91 78 01 	lds	r24, 0x0178
    7464:	83 30       	cpi	r24, 0x03	; 3
    7466:	09 f4       	brne	.+2      	; 0x746a <EVENT_USB_Device_ControlRequest+0x3e>
    7468:	c7 c1       	rjmp	.+910    	; 0x77f8 <EVENT_USB_Device_ControlRequest+0x3cc>
    746a:	30 f4       	brcc	.+12     	; 0x7478 <EVENT_USB_Device_ControlRequest+0x4c>
    746c:	81 30       	cpi	r24, 0x01	; 1
    746e:	69 f0       	breq	.+26     	; 0x748a <EVENT_USB_Device_ControlRequest+0x5e>
    7470:	82 30       	cpi	r24, 0x02	; 2
    7472:	09 f0       	breq	.+2      	; 0x7476 <EVENT_USB_Device_ControlRequest+0x4a>
    7474:	fa c1       	rjmp	.+1012   	; 0x786a <EVENT_USB_Device_ControlRequest+0x43e>
    7476:	1b c1       	rjmp	.+566    	; 0x76ae <EVENT_USB_Device_ControlRequest+0x282>
    7478:	85 30       	cpi	r24, 0x05	; 5
    747a:	09 f4       	brne	.+2      	; 0x747e <EVENT_USB_Device_ControlRequest+0x52>
    747c:	db c1       	rjmp	.+950    	; 0x7834 <EVENT_USB_Device_ControlRequest+0x408>
    747e:	08 f4       	brcc	.+2      	; 0x7482 <EVENT_USB_Device_ControlRequest+0x56>
    7480:	d1 c1       	rjmp	.+930    	; 0x7824 <EVENT_USB_Device_ControlRequest+0x3f8>
    7482:	86 30       	cpi	r24, 0x06	; 6
    7484:	09 f0       	breq	.+2      	; 0x7488 <EVENT_USB_Device_ControlRequest+0x5c>
    7486:	f1 c1       	rjmp	.+994    	; 0x786a <EVENT_USB_Device_ControlRequest+0x43e>
    7488:	dd c1       	rjmp	.+954    	; 0x7844 <EVENT_USB_Device_ControlRequest+0x418>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    748a:	80 91 e8 00 	lds	r24, 0x00E8
    748e:	87 7f       	andi	r24, 0xF7	; 247
    7490:	80 93 e8 00 	sts	0x00E8, r24
	{
		case DFU_REQ_DNLOAD:
			Endpoint_ClearSETUP();

			/* Check if bootloader is waiting to terminate */
			if (WaitForExit)
    7494:	80 91 62 01 	lds	r24, 0x0162
    7498:	88 23       	and	r24, r24
    749a:	19 f0       	breq	.+6      	; 0x74a2 <EVENT_USB_Device_ControlRequest+0x76>
			{
				/* Bootloader is terminating - process last received command */
				ProcessBootloaderCommand();
    749c:	70 de       	rcall	.-800    	; 0x717e <ProcessBootloaderCommand>
    749e:	10 92 62 01 	sts	0x0162, r1

				/* Indicate that the last command has now been processed - free to exit bootloader */
				WaitForExit = false;
    74a2:	80 91 6b 01 	lds	r24, 0x016B
			}

			/* If the request has a data stage, load it into the command struct */
			if (SentCommand.DataSize)
    74a6:	90 91 6c 01 	lds	r25, 0x016C
    74aa:	00 97       	sbiw	r24, 0x00	; 0
    74ac:	91 f1       	breq	.+100    	; 0x7512 <EVENT_USB_Device_ControlRequest+0xe6>
    74ae:	20 91 e8 00 	lds	r18, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    74b2:	22 fd       	sbrc	r18, 2
			{
				while (!(Endpoint_IsOUTReceived()))
    74b4:	04 c0       	rjmp	.+8      	; 0x74be <EVENT_USB_Device_ControlRequest+0x92>
    74b6:	2e b3       	in	r18, 0x1e	; 30
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    74b8:	21 11       	cpse	r18, r1
    74ba:	f9 cf       	rjmp	.-14     	; 0x74ae <EVENT_USB_Device_ControlRequest+0x82>
    74bc:	d6 c1       	rjmp	.+940    	; 0x786a <EVENT_USB_Device_ControlRequest+0x43e>
    74be:	20 91 f1 00 	lds	r18, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    74c2:	20 93 65 01 	sts	0x0165, r18
					  return;
				}

				/* First byte of the data stage is the DNLOAD request's command */
				SentCommand.Command = Endpoint_Read_8();
    74c6:	01 97       	sbiw	r24, 0x01	; 1

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;
    74c8:	90 93 6c 01 	sts	0x016C, r25
    74cc:	80 93 6b 01 	sts	0x016B, r24
    74d0:	e6 e6       	ldi	r30, 0x66	; 102
    74d2:	f1 e0       	ldi	r31, 0x01	; 1
    74d4:	12 c0       	rjmp	.+36     	; 0x74fa <EVENT_USB_Device_ControlRequest+0xce>
    74d6:	80 91 f1 00 	lds	r24, 0x00F1
    74da:	81 93       	st	Z+, r24

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
				     Endpoint_BytesInEndpoint(); DataByte++)
				{
					SentCommand.Data[DataByte] = Endpoint_Read_8();
    74dc:	80 91 6b 01 	lds	r24, 0x016B
					SentCommand.DataSize--;
    74e0:	90 91 6c 01 	lds	r25, 0x016C
    74e4:	01 97       	sbiw	r24, 0x01	; 1
    74e6:	90 93 6c 01 	sts	0x016C, r25
    74ea:	80 93 6b 01 	sts	0x016B, r24
    74ee:	21 e0       	ldi	r18, 0x01	; 1

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
    74f0:	eb 36       	cpi	r30, 0x6B	; 107
    74f2:	f2 07       	cpc	r31, r18
    74f4:	11 f4       	brne	.+4      	; 0x74fa <EVENT_USB_Device_ControlRequest+0xce>
    74f6:	43 de       	rcall	.-890    	; 0x717e <ProcessBootloaderCommand>
					SentCommand.Data[DataByte] = Endpoint_Read_8();
					SentCommand.DataSize--;
				}

				/* Process the command */
				ProcessBootloaderCommand();
    74f8:	0c c0       	rjmp	.+24     	; 0x7512 <EVENT_USB_Device_ControlRequest+0xe6>
    74fa:	90 91 f3 00 	lds	r25, 0x00F3
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    74fe:	80 91 f2 00 	lds	r24, 0x00F2
    7502:	f9 2e       	mov	r15, r25
    7504:	e1 2c       	mov	r14, r1
    7506:	b7 01       	movw	r22, r14
    7508:	68 2b       	or	r22, r24
    750a:	cb 01       	movw	r24, r22
    750c:	89 2b       	or	r24, r25
    750e:	19 f7       	brne	.-58     	; 0x74d6 <EVENT_USB_Device_ControlRequest+0xaa>

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
    7510:	f2 cf       	rjmp	.-28     	; 0x74f6 <EVENT_USB_Device_ControlRequest+0xca>
    7512:	80 91 01 01 	lds	r24, 0x0101
				/* Process the command */
				ProcessBootloaderCommand();
			}

			/* Check if currently downloading firmware */
			if (DFU_State == dfuDNLOAD_IDLE)
    7516:	85 30       	cpi	r24, 0x05	; 5
    7518:	09 f0       	breq	.+2      	; 0x751c <EVENT_USB_Device_ControlRequest+0xf0>
    751a:	c5 c0       	rjmp	.+394    	; 0x76a6 <EVENT_USB_Device_ControlRequest+0x27a>
    751c:	80 91 6b 01 	lds	r24, 0x016B
			{
				if (!(SentCommand.DataSize))
    7520:	90 91 6c 01 	lds	r25, 0x016C
    7524:	89 2b       	or	r24, r25
    7526:	21 f4       	brne	.+8      	; 0x7530 <EVENT_USB_Device_ControlRequest+0x104>
    7528:	82 e0       	ldi	r24, 0x02	; 2
    752a:	80 93 01 01 	sts	0x0101, r24
				{
					DFU_State = dfuIDLE;
    752e:	bb c0       	rjmp	.+374    	; 0x76a6 <EVENT_USB_Device_ControlRequest+0x27a>
    7530:	8a e1       	ldi	r24, 0x1A	; 26
    7532:	f4 dd       	rcall	.-1048   	; 0x711c <DiscardFillerBytes>
				}
				else
				{
					/* Throw away the filler bytes before the start of the firmware */
					DiscardFillerBytes(DFU_FILLER_BYTES_SIZE);
    7534:	e0 90 6d 01 	lds	r14, 0x016D
    7538:	f0 90 6e 01 	lds	r15, 0x016E

					/* Throw away the packet alignment filler bytes before the start of the firmware */
					DiscardFillerBytes(StartAddr % FIXED_CONTROL_ENDPOINT_SIZE);
    753c:	8e 2d       	mov	r24, r14
    753e:	8f 71       	andi	r24, 0x1F	; 31
    7540:	ed dd       	rcall	.-1062   	; 0x711c <DiscardFillerBytes>
    7542:	00 91 6f 01 	lds	r16, 0x016F
    7546:	10 91 70 01 	lds	r17, 0x0170

					/* Calculate the number of bytes remaining to be written */
					uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
    754a:	0f 5f       	subi	r16, 0xFF	; 255
    754c:	1f 4f       	sbci	r17, 0xFF	; 255
    754e:	0e 19       	sub	r16, r14
    7550:	1f 09       	sbc	r17, r15
    7552:	80 91 66 01 	lds	r24, 0x0166
    7556:	81 11       	cpse	r24, r1
    7558:	a1 c0       	rjmp	.+322    	; 0x769c <EVENT_USB_Device_ControlRequest+0x270>

					if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))        // Write flash
    755a:	98 01       	movw	r18, r16
    755c:	36 95       	lsr	r19
    755e:	27 95       	ror	r18
    7560:	1e 2d       	mov	r17, r14
					{
						/* Calculate the number of words to be written from the number of bytes to be written */
						uint16_t WordsRemaining = (BytesRemaining >> 1);
    7562:	0f 2d       	mov	r16, r15
    7564:	40 91 71 01 	lds	r20, 0x0171

						union
						{
							uint16_t Words[2];
							uint32_t Long;
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};
    7568:	d4 2e       	mov	r13, r20
    756a:	c1 2c       	mov	r12, r1
    756c:	c7 01       	movw	r24, r14
    756e:	f1 2c       	mov	r15, r1
    7570:	ee 24       	eor	r14, r14
    7572:	e3 94       	inc	r14

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
    7574:	45 e0       	ldi	r20, 0x05	; 5
						uint8_t  WordsInFlashPage          = 0;
    7576:	b4 2e       	mov	r11, r20
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_16_LE());
    7578:	53 e0       	ldi	r21, 0x03	; 3
    757a:	a5 2e       	mov	r10, r21

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
    757c:	51 c0       	rjmp	.+162    	; 0x7620 <EVENT_USB_Device_ControlRequest+0x1f4>
    757e:	50 91 f3 00 	lds	r21, 0x00F3
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
    7582:	40 91 f2 00 	lds	r20, 0x00F2
    7586:	d5 2f       	mov	r29, r21
    7588:	70 e0       	ldi	r23, 0x00	; 0
    758a:	c7 2f       	mov	r28, r23
    758c:	fe 01       	movw	r30, r28
    758e:	e4 2b       	or	r30, r20
    7590:	af 01       	movw	r20, r30
    7592:	45 2b       	or	r20, r21
    7594:	f9 f0       	breq	.+62     	; 0x75d4 <EVENT_USB_Device_ControlRequest+0x1a8>
    7596:	21 50       	subi	r18, 0x01	; 1
    7598:	31 09       	sbc	r19, r1
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
    759a:	41 2f       	mov	r20, r17
    759c:	50 2f       	mov	r21, r16
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
    759e:	6d 2d       	mov	r22, r13
    75a0:	7c 2d       	mov	r23, r12
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_16_LE());
    75a2:	f0 91 f1 00 	lds	r31, 0x00F1
    75a6:	e0 91 f1 00 	lds	r30, 0x00F1
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    75aa:	0f 2f       	mov	r16, r31
    75ac:	1e 2f       	mov	r17, r30
				Data.Bytes[1] = UEDATX;
    75ae:	fa 01       	movw	r30, r20
    75b0:	08 01       	movw	r0, r16

				return Data.Value;
    75b2:	e0 92 57 00 	sts	0x0057, r14
    75b6:	e8 95       	spm
    75b8:	11 24       	eor	r1, r1
    75ba:	f3 94       	inc	r15
    75bc:	4e 5f       	subi	r20, 0xFE	; 254
    75be:	5f 4f       	sbci	r21, 0xFF	; 255
    75c0:	6f 4f       	sbci	r22, 0xFF	; 255

							/* Adjust counters */
							WordsInFlashPage      += 1;
    75c2:	7f 4f       	sbci	r23, 0xFF	; 255
							CurrFlashAddress.Long += 2;
    75c4:	14 2f       	mov	r17, r20
    75c6:	05 2f       	mov	r16, r21
    75c8:	d6 2e       	mov	r13, r22
    75ca:	c7 2e       	mov	r12, r23
    75cc:	f0 e4       	ldi	r31, 0x40	; 64
    75ce:	ff 12       	cpse	r15, r31
    75d0:	10 c0       	rjmp	.+32     	; 0x75f2 <EVENT_USB_Device_ControlRequest+0x1c6>
    75d2:	12 c0       	rjmp	.+36     	; 0x75f8 <EVENT_USB_Device_ControlRequest+0x1cc>

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
    75d4:	40 91 e8 00 	lds	r20, 0x00E8
    75d8:	4b 7f       	andi	r20, 0xFB	; 251
    75da:	40 93 e8 00 	sts	0x00E8, r20
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    75de:	04 c0       	rjmp	.+8      	; 0x75e8 <EVENT_USB_Device_ControlRequest+0x1bc>
    75e0:	4e b3       	in	r20, 0x1e	; 30
    75e2:	44 23       	and	r20, r20
    75e4:	09 f4       	brne	.+2      	; 0x75e8 <EVENT_USB_Device_ControlRequest+0x1bc>
    75e6:	41 c1       	rjmp	.+642    	; 0x786a <EVENT_USB_Device_ControlRequest+0x43e>
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
    75e8:	40 91 e8 00 	lds	r20, 0x00E8
    75ec:	42 ff       	sbrs	r20, 2
    75ee:	f8 cf       	rjmp	.-16     	; 0x75e0 <EVENT_USB_Device_ControlRequest+0x1b4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    75f0:	d2 cf       	rjmp	.-92     	; 0x7596 <EVENT_USB_Device_ControlRequest+0x16a>
    75f2:	21 15       	cp	r18, r1
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
    75f4:	31 05       	cpc	r19, r1
    75f6:	a1 f4       	brne	.+40     	; 0x7620 <EVENT_USB_Device_ControlRequest+0x1f4>
    75f8:	fc 01       	movw	r30, r24
							/* Adjust counters */
							WordsInFlashPage      += 1;
							CurrFlashAddress.Long += 2;

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
    75fa:	b0 92 57 00 	sts	0x0057, r11
    75fe:	e8 95       	spm
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
    7600:	07 b6       	in	r0, 0x37	; 55
    7602:	00 fc       	sbrc	r0, 0
    7604:	fd cf       	rjmp	.-6      	; 0x7600 <EVENT_USB_Device_ControlRequest+0x1d4>
    7606:	21 15       	cp	r18, r1
								boot_spm_busy_wait();
    7608:	31 05       	cpc	r19, r1
    760a:	51 f0       	breq	.+20     	; 0x7620 <EVENT_USB_Device_ControlRequest+0x1f4>
    760c:	fa 01       	movw	r30, r20

								/* Check if programming incomplete */
								if (WordsRemaining)
    760e:	a0 92 57 00 	sts	0x0057, r10
    7612:	e8 95       	spm
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
    7614:	07 b6       	in	r0, 0x37	; 55
    7616:	00 fc       	sbrc	r0, 0
    7618:	fd cf       	rjmp	.-6      	; 0x7614 <EVENT_USB_Device_ControlRequest+0x1e8>
    761a:	db 01       	movw	r26, r22
									boot_spm_busy_wait();
    761c:	ca 01       	movw	r24, r20
    761e:	f1 2c       	mov	r15, r1
    7620:	21 15       	cp	r18, r1
								boot_spm_busy_wait();

								/* Check if programming incomplete */
								if (WordsRemaining)
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
    7622:	31 05       	cpc	r19, r1
    7624:	09 f0       	breq	.+2      	; 0x7628 <EVENT_USB_Device_ControlRequest+0x1fc>
									WordsInFlashPage          = 0;
    7626:	ab cf       	rjmp	.-170    	; 0x757e <EVENT_USB_Device_ControlRequest+0x152>
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
    7628:	80 91 6f 01 	lds	r24, 0x016F
    762c:	90 91 70 01 	lds	r25, 0x0170
								}
							}
						}

						/* Once programming complete, start address equals the end address */
						StartAddr = EndAddr;
    7630:	90 93 6e 01 	sts	0x016E, r25
    7634:	80 93 6d 01 	sts	0x016D, r24
    7638:	81 e1       	ldi	r24, 0x11	; 17
    763a:	80 93 57 00 	sts	0x0057, r24
    763e:	e8 95       	spm

						/* Re-enable the RWW section of flash */
						boot_rww_enable();
    7640:	30 c0       	rjmp	.+96     	; 0x76a2 <EVENT_USB_Device_ControlRequest+0x276>
    7642:	90 91 f3 00 	lds	r25, 0x00F3
    7646:	80 91 f2 00 	lds	r24, 0x00F2
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    764a:	d9 2e       	mov	r13, r25
    764c:	c1 2c       	mov	r12, r1
    764e:	96 01       	movw	r18, r12
    7650:	28 2b       	or	r18, r24
    7652:	c9 01       	movw	r24, r18
    7654:	89 2b       	or	r24, r25
    7656:	99 f0       	breq	.+38     	; 0x767e <EVENT_USB_Device_ControlRequest+0x252>
    7658:	01 50       	subi	r16, 0x01	; 1
    765a:	11 09       	sbc	r17, r1
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
    765c:	60 91 f1 00 	lds	r22, 0x00F1
						/* Re-enable the RWW section of flash */
						boot_rww_enable();
					}
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
    7660:	80 91 6d 01 	lds	r24, 0x016D
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7664:	90 91 6e 01 	lds	r25, 0x016E
									  return;
								}
							}

							/* Read the byte from the USB interface and write to to the EEPROM */
							eeprom_write_byte((uint8_t*)StartAddr, Endpoint_Read_8());
    7668:	0c d4       	rcall	.+2072   	; 0x7e82 <__eewr_byte_m32u4>
    766a:	80 91 6d 01 	lds	r24, 0x016D
    766e:	90 91 6e 01 	lds	r25, 0x016E
    7672:	01 96       	adiw	r24, 0x01	; 1

							/* Adjust counters */
							StartAddr++;
    7674:	90 93 6e 01 	sts	0x016E, r25
    7678:	80 93 6d 01 	sts	0x016D, r24
    767c:	0f c0       	rjmp	.+30     	; 0x769c <EVENT_USB_Device_ControlRequest+0x270>
    767e:	80 91 e8 00 	lds	r24, 0x00E8
    7682:	8b 7f       	andi	r24, 0xFB	; 251
    7684:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    7688:	04 c0       	rjmp	.+8      	; 0x7692 <EVENT_USB_Device_ControlRequest+0x266>
    768a:	8e b3       	in	r24, 0x1e	; 30
    768c:	88 23       	and	r24, r24
    768e:	09 f4       	brne	.+2      	; 0x7692 <EVENT_USB_Device_ControlRequest+0x266>
    7690:	ec c0       	rjmp	.+472    	; 0x786a <EVENT_USB_Device_ControlRequest+0x43e>
    7692:	80 91 e8 00 	lds	r24, 0x00E8
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
    7696:	82 ff       	sbrs	r24, 2
    7698:	f8 cf       	rjmp	.-16     	; 0x768a <EVENT_USB_Device_ControlRequest+0x25e>
    769a:	de cf       	rjmp	.-68     	; 0x7658 <EVENT_USB_Device_ControlRequest+0x22c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    769c:	01 15       	cp	r16, r1
    769e:	11 05       	cpc	r17, r1
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
    76a0:	81 f6       	brne	.-96     	; 0x7642 <EVENT_USB_Device_ControlRequest+0x216>
    76a2:	80 e1       	ldi	r24, 0x10	; 16
    76a4:	3b dd       	rcall	.-1418   	; 0x711c <DiscardFillerBytes>
						/* Re-enable the RWW section of flash */
						boot_rww_enable();
					}
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
    76a6:	80 91 e8 00 	lds	r24, 0x00E8
    76aa:	8b 7f       	andi	r24, 0xFB	; 251
							StartAddr++;
						}
					}

					/* Throw away the currently unused DFU file suffix */
					DiscardFillerBytes(DFU_FILE_SUFFIX_SIZE);
    76ac:	a2 c0       	rjmp	.+324    	; 0x77f2 <EVENT_USB_Device_ControlRequest+0x3c6>
    76ae:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    76b2:	87 7f       	andi	r24, 0xF7	; 247
    76b4:	80 93 e8 00 	sts	0x00E8, r24
    76b8:	04 c0       	rjmp	.+8      	; 0x76c2 <EVENT_USB_Device_ControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    76ba:	8e b3       	in	r24, 0x1e	; 30
    76bc:	88 23       	and	r24, r24
    76be:	09 f4       	brne	.+2      	; 0x76c2 <EVENT_USB_Device_ControlRequest+0x296>
    76c0:	d4 c0       	rjmp	.+424    	; 0x786a <EVENT_USB_Device_ControlRequest+0x43e>
    76c2:	80 91 e8 00 	lds	r24, 0x00E8
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
    76c6:	80 ff       	sbrs	r24, 0
    76c8:	f8 cf       	rjmp	.-16     	; 0x76ba <EVENT_USB_Device_ControlRequest+0x28e>
    76ca:	80 91 01 01 	lds	r24, 0x0101
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    76ce:	89 30       	cpi	r24, 0x09	; 9
    76d0:	91 f0       	breq	.+36     	; 0x76f6 <EVENT_USB_Device_ControlRequest+0x2ca>

			break;
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
    76d2:	8a 30       	cpi	r24, 0x0A	; 10
    76d4:	59 f4       	brne	.+22     	; 0x76ec <EVENT_USB_Device_ControlRequest+0x2c0>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
				  return;
			}

			if (DFU_State != dfuUPLOAD_IDLE)
    76d6:	80 91 66 01 	lds	r24, 0x0166
    76da:	81 30       	cpi	r24, 0x01	; 1
    76dc:	39 f4       	brne	.+14     	; 0x76ec <EVENT_USB_Device_ControlRequest+0x2c0>
			{
				if ((DFU_State == dfuERROR) && IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))       // Blank Check
    76de:	90 91 6d 01 	lds	r25, 0x016D
    76e2:	80 91 6e 01 	lds	r24, 0x016E
    76e6:	90 93 f1 00 	sts	0x00F1, r25
				{
					/* Blank checking is performed in the DFU_DNLOAD request - if we get here we've told the host
					   that the memory isn't blank, and the host is requesting the first non-blank address */
					Endpoint_Write_16_LE(StartAddr);
    76ea:	02 c0       	rjmp	.+4      	; 0x76f0 <EVENT_USB_Device_ControlRequest+0x2c4>
    76ec:	80 91 72 01 	lds	r24, 0x0172
    76f0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    76f4:	7b c0       	rjmp	.+246    	; 0x77ec <EVENT_USB_Device_ControlRequest+0x3c0>
    76f6:	40 91 6d 01 	lds	r20, 0x016D
				}
				else
				{
					/* Idle state upload - send response to last issued command */
					Endpoint_Write_8(ResponseByte);
    76fa:	50 91 6e 01 	lds	r21, 0x016E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    76fe:	c0 91 6f 01 	lds	r28, 0x016F
				}
			}
			else
			{
				/* Determine the number of bytes remaining in the current block */
				uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
    7702:	d0 91 70 01 	lds	r29, 0x0170
    7706:	21 96       	adiw	r28, 0x01	; 1
    7708:	c4 1b       	sub	r28, r20
    770a:	d5 0b       	sbc	r29, r21
    770c:	80 91 66 01 	lds	r24, 0x0166
    7710:	81 11       	cpse	r24, r1
    7712:	39 c0       	rjmp	.+114    	; 0x7786 <EVENT_USB_Device_ControlRequest+0x35a>
    7714:	d6 95       	lsr	r29
    7716:	c7 95       	ror	r28

				if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))            // Read FLASH
    7718:	ca 01       	movw	r24, r20
    771a:	a0 91 71 01 	lds	r26, 0x0171
    771e:	b0 e0       	ldi	r27, 0x00	; 0
				{
					/* Calculate the number of words to be written from the number of bytes to be written */
					uint16_t WordsRemaining = (BytesRemaining >> 1);
    7720:	27 c0       	rjmp	.+78     	; 0x7770 <EVENT_USB_Device_ControlRequest+0x344>
    7722:	50 91 f3 00 	lds	r21, 0x00F3

					union
					{
						uint16_t Words[2];
						uint32_t Long;
					} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
    7726:	40 91 f2 00 	lds	r20, 0x00F2
    772a:	35 2f       	mov	r19, r21

					while (WordsRemaining--)
    772c:	20 e0       	ldi	r18, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    772e:	b9 01       	movw	r22, r18
    7730:	64 2b       	or	r22, r20
    7732:	ab 01       	movw	r20, r22
    7734:	40 32       	cpi	r20, 0x20	; 32
    7736:	51 05       	cpc	r21, r1
    7738:	61 f0       	breq	.+24     	; 0x7752 <EVENT_USB_Device_ControlRequest+0x326>
    773a:	fc 01       	movw	r30, r24
    773c:	45 91       	lpm	r20, Z+
    773e:	54 91       	lpm	r21, Z+
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
    7740:	40 93 f1 00 	sts	0x00F1, r20
    7744:	50 93 f1 00 	sts	0x00F1, r21

						/* Read the flash word and send it via USB to the host */
						#if (FLASHEND > 0xFFFF)
							Endpoint_Write_16_LE(pgm_read_word_far(CurrFlashAddress.Long));
						#else
							Endpoint_Write_16_LE(pgm_read_word(CurrFlashAddress.Long));
    7748:	02 96       	adiw	r24, 0x02	; 2
    774a:	a1 1d       	adc	r26, r1
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    774c:	b1 1d       	adc	r27, r1
    774e:	21 97       	sbiw	r28, 0x01	; 1
				UEDATX = (Data >> 8);
    7750:	0f c0       	rjmp	.+30     	; 0x7770 <EVENT_USB_Device_ControlRequest+0x344>
    7752:	40 91 e8 00 	lds	r20, 0x00E8
						#endif

						/* Adjust counters */
						CurrFlashAddress.Long += 2;
    7756:	4e 7f       	andi	r20, 0xFE	; 254
    7758:	40 93 e8 00 	sts	0x00E8, r20
    775c:	04 c0       	rjmp	.+8      	; 0x7766 <EVENT_USB_Device_ControlRequest+0x33a>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    775e:	4e b3       	in	r20, 0x1e	; 30
    7760:	44 23       	and	r20, r20
    7762:	09 f4       	brne	.+2      	; 0x7766 <EVENT_USB_Device_ControlRequest+0x33a>
    7764:	82 c0       	rjmp	.+260    	; 0x786a <EVENT_USB_Device_ControlRequest+0x43e>
    7766:	40 91 e8 00 	lds	r20, 0x00E8
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
    776a:	40 ff       	sbrs	r20, 0
    776c:	f8 cf       	rjmp	.-16     	; 0x775e <EVENT_USB_Device_ControlRequest+0x332>
    776e:	e5 cf       	rjmp	.-54     	; 0x773a <EVENT_USB_Device_ControlRequest+0x30e>
    7770:	20 97       	sbiw	r28, 0x00	; 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7772:	b9 f6       	brne	.-82     	; 0x7722 <EVENT_USB_Device_ControlRequest+0x2f6>
    7774:	80 91 6f 01 	lds	r24, 0x016F
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
    7778:	90 91 70 01 	lds	r25, 0x0170
					{
						uint16_t Words[2];
						uint32_t Long;
					} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};

					while (WordsRemaining--)
    777c:	90 93 6e 01 	sts	0x016E, r25
						/* Adjust counters */
						CurrFlashAddress.Long += 2;
					}

					/* Once reading is complete, start address equals the end address */
					StartAddr = EndAddr;
    7780:	80 93 6d 01 	sts	0x016D, r24
    7784:	30 c0       	rjmp	.+96     	; 0x77e6 <EVENT_USB_Device_ControlRequest+0x3ba>
    7786:	82 30       	cpi	r24, 0x02	; 2
    7788:	71 f5       	brne	.+92     	; 0x77e6 <EVENT_USB_Device_ControlRequest+0x3ba>
    778a:	2b c0       	rjmp	.+86     	; 0x77e2 <EVENT_USB_Device_ControlRequest+0x3b6>
    778c:	90 91 f3 00 	lds	r25, 0x00F3
    7790:	80 91 f2 00 	lds	r24, 0x00F2
				}
				else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
    7794:	19 2f       	mov	r17, r25
    7796:	00 e0       	ldi	r16, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7798:	f8 01       	movw	r30, r16
    779a:	e8 2b       	or	r30, r24
    779c:	cf 01       	movw	r24, r30
    779e:	80 97       	sbiw	r24, 0x20	; 32
    77a0:	89 f0       	breq	.+34     	; 0x77c4 <EVENT_USB_Device_ControlRequest+0x398>
    77a2:	21 97       	sbiw	r28, 0x01	; 1
    77a4:	e0 90 6d 01 	lds	r14, 0x016D
    77a8:	f0 90 6e 01 	lds	r15, 0x016E
				{
					while (BytesRemaining--)
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
    77ac:	c7 01       	movw	r24, r14
					/* Once reading is complete, start address equals the end address */
					StartAddr = EndAddr;
				}
				else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
				{
					while (BytesRemaining--)
    77ae:	61 d3       	rcall	.+1730   	; 0x7e72 <__eerd_byte_m32u4>
								  return;
							}
						}

						/* Read the EEPROM byte and send it via USB to the host */
						Endpoint_Write_8(eeprom_read_byte((uint8_t*)StartAddr));
    77b0:	80 93 f1 00 	sts	0x00F1, r24
    77b4:	ff ef       	ldi	r31, 0xFF	; 255
    77b6:	ef 1a       	sub	r14, r31
    77b8:	ff 0a       	sbc	r15, r31
    77ba:	f0 92 6e 01 	sts	0x016E, r15
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    77be:	e0 92 6d 01 	sts	0x016D, r14

						/* Adjust counters */
						StartAddr++;
    77c2:	0f c0       	rjmp	.+30     	; 0x77e2 <EVENT_USB_Device_ControlRequest+0x3b6>
    77c4:	80 91 e8 00 	lds	r24, 0x00E8
    77c8:	8e 7f       	andi	r24, 0xFE	; 254
    77ca:	80 93 e8 00 	sts	0x00E8, r24
    77ce:	04 c0       	rjmp	.+8      	; 0x77d8 <EVENT_USB_Device_ControlRequest+0x3ac>
    77d0:	8e b3       	in	r24, 0x1e	; 30
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    77d2:	88 23       	and	r24, r24
    77d4:	09 f4       	brne	.+2      	; 0x77d8 <EVENT_USB_Device_ControlRequest+0x3ac>
    77d6:	49 c0       	rjmp	.+146    	; 0x786a <EVENT_USB_Device_ControlRequest+0x43e>
    77d8:	80 91 e8 00 	lds	r24, 0x00E8
    77dc:	80 ff       	sbrs	r24, 0
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
    77de:	f8 cf       	rjmp	.-16     	; 0x77d0 <EVENT_USB_Device_ControlRequest+0x3a4>
    77e0:	e0 cf       	rjmp	.-64     	; 0x77a2 <EVENT_USB_Device_ControlRequest+0x376>
    77e2:	20 97       	sbiw	r28, 0x00	; 0
    77e4:	99 f6       	brne	.-90     	; 0x778c <EVENT_USB_Device_ControlRequest+0x360>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    77e6:	82 e0       	ldi	r24, 0x02	; 2
    77e8:	80 93 01 01 	sts	0x0101, r24
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
    77ec:	80 91 e8 00 	lds	r24, 0x00E8
					/* Once reading is complete, start address equals the end address */
					StartAddr = EndAddr;
				}
				else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
				{
					while (BytesRemaining--)
    77f0:	8e 7f       	andi	r24, 0xFE	; 254
    77f2:	80 93 e8 00 	sts	0x00E8, r24
						StartAddr++;
					}
				}

				/* Return to idle state */
				DFU_State = dfuIDLE;
    77f6:	2e c0       	rjmp	.+92     	; 0x7854 <EVENT_USB_Device_ControlRequest+0x428>
    77f8:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    77fc:	87 7f       	andi	r24, 0xF7	; 247
    77fe:	80 93 e8 00 	sts	0x00E8, r24
    7802:	80 91 73 01 	lds	r24, 0x0173
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7806:	80 93 f1 00 	sts	0x00F1, r24
    780a:	10 92 f1 00 	sts	0x00F1, r1
    780e:	10 92 f1 00 	sts	0x00F1, r1
			break;
		case DFU_REQ_GETSTATUS:
			Endpoint_ClearSETUP();

			/* Write 8-bit status value */
			Endpoint_Write_8(DFU_Status);
    7812:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7816:	80 91 01 01 	lds	r24, 0x0101
    781a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    781e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    7822:	e4 cf       	rjmp	.-56     	; 0x77ec <EVENT_USB_Device_ControlRequest+0x3c0>
			/* Write 24-bit poll timeout value */
			Endpoint_Write_8(0);
			Endpoint_Write_16_LE(0);

			/* Write 8-bit state value */
			Endpoint_Write_8(DFU_State);
    7824:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7828:	87 7f       	andi	r24, 0xF7	; 247
    782a:	80 93 e8 00 	sts	0x00E8, r24
    782e:	10 92 73 01 	sts	0x0173, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7832:	10 c0       	rjmp	.+32     	; 0x7854 <EVENT_USB_Device_ControlRequest+0x428>
    7834:	80 91 e8 00 	lds	r24, 0x00E8
    7838:	87 7f       	andi	r24, 0xF7	; 247
    783a:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case DFU_REQ_CLRSTATUS:
			Endpoint_ClearSETUP();

			/* Reset the status value variable to the default OK status */
			DFU_Status = OK;
    783e:	80 91 01 01 	lds	r24, 0x0101
    7842:	56 cf       	rjmp	.-340    	; 0x76f0 <EVENT_USB_Device_ControlRequest+0x2c4>
    7844:	80 91 e8 00 	lds	r24, 0x00E8
    7848:	87 7f       	andi	r24, 0xF7	; 247
    784a:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case DFU_REQ_GETSTATE:
			Endpoint_ClearSETUP();

			/* Write the current device state to the endpoint */
			Endpoint_Write_8(DFU_State);
    784e:	82 e0       	ldi	r24, 0x02	; 2
    7850:	80 93 01 01 	sts	0x0101, r24
    7854:	df 91       	pop	r29
    7856:	cf 91       	pop	r28
    7858:	1f 91       	pop	r17
    785a:	0f 91       	pop	r16
			break;
		case DFU_REQ_ABORT:
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;
    785c:	ff 90       	pop	r15
    785e:	ef 90       	pop	r14
    7860:	df 90       	pop	r13

			Endpoint_ClearStatusStage();
			break;
	}
}
    7862:	cf 90       	pop	r12
    7864:	bf 90       	pop	r11
    7866:	af 90       	pop	r10
    7868:	00 c1       	rjmp	.+512    	; 0x7a6a <Endpoint_ClearStatusStage>
    786a:	df 91       	pop	r29
    786c:	cf 91       	pop	r28
    786e:	1f 91       	pop	r17
    7870:	0f 91       	pop	r16
    7872:	ff 90       	pop	r15
    7874:	ef 90       	pop	r14
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;

			Endpoint_ClearStatusStage();
    7876:	df 90       	pop	r13
    7878:	cf 90       	pop	r12
			break;
	}
}
    787a:	bf 90       	pop	r11
    787c:	af 90       	pop	r10
    787e:	08 95       	ret

00007880 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    7880:	29 2f       	mov	r18, r25
    7882:	30 e0       	ldi	r19, 0x00	; 0
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
    7884:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    7886:	22 30       	cpi	r18, 0x02	; 2
    7888:	31 05       	cpc	r19, r1
    788a:	39 f0       	breq	.+14     	; 0x789a <CALLBACK_USB_GetDescriptor+0x1a>
    788c:	23 30       	cpi	r18, 0x03	; 3
    788e:	31 05       	cpc	r19, r1
    7890:	49 f0       	breq	.+18     	; 0x78a4 <CALLBACK_USB_GetDescriptor+0x24>
    7892:	21 30       	cpi	r18, 0x01	; 1
    7894:	31 05       	cpc	r19, r1
    7896:	89 f0       	breq	.+34     	; 0x78ba <CALLBACK_USB_GetDescriptor+0x3a>
    7898:	0b c0       	rjmp	.+22     	; 0x78b0 <CALLBACK_USB_GetDescriptor+0x30>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    789a:	2b e1       	ldi	r18, 0x1B	; 27
    789c:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    789e:	84 e3       	ldi	r24, 0x34	; 52
    78a0:	91 e0       	ldi	r25, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    78a2:	1e c0       	rjmp	.+60     	; 0x78e0 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			if (!(DescriptorNumber))
    78a4:	88 23       	and	r24, r24
    78a6:	71 f0       	breq	.+28     	; 0x78c4 <CALLBACK_USB_GetDescriptor+0x44>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == 0x01)
    78a8:	81 30       	cpi	r24, 0x01	; 1
    78aa:	89 f0       	breq	.+34     	; 0x78ce <CALLBACK_USB_GetDescriptor+0x4e>
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == 0x02)
    78ac:	82 30       	cpi	r24, 0x02	; 2
    78ae:	a1 f0       	breq	.+40     	; 0x78d8 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    78b0:	20 e0       	ldi	r18, 0x00	; 0
    78b2:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    78b4:	80 e0       	ldi	r24, 0x00	; 0
    78b6:	90 e0       	ldi	r25, 0x00	; 0
    78b8:	13 c0       	rjmp	.+38     	; 0x78e0 <CALLBACK_USB_GetDescriptor+0x60>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    78ba:	22 e1       	ldi	r18, 0x12	; 18
    78bc:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    78be:	8f e4       	ldi	r24, 0x4F	; 79
    78c0:	91 e0       	ldi	r25, 0x01	; 1
    78c2:	0e c0       	rjmp	.+28     	; 0x78e0 <CALLBACK_USB_GetDescriptor+0x60>
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    78c4:	24 e0       	ldi	r18, 0x04	; 4
    78c6:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
    78c8:	80 e3       	ldi	r24, 0x30	; 48
    78ca:	91 e0       	ldi	r25, 0x01	; 1
    78cc:	09 c0       	rjmp	.+18     	; 0x78e0 <CALLBACK_USB_GetDescriptor+0x60>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == 0x01)
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
    78ce:	28 e1       	ldi	r18, 0x18	; 24
    78d0:	30 e0       	ldi	r19, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == 0x01)
			{
				Address = &ManufacturerString;
    78d2:	86 e1       	ldi	r24, 0x16	; 22
    78d4:	91 e0       	ldi	r25, 0x01	; 1
    78d6:	04 c0       	rjmp	.+8      	; 0x78e0 <CALLBACK_USB_GetDescriptor+0x60>
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == 0x02)
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    78d8:	22 e1       	ldi	r18, 0x12	; 18
    78da:	30 e0       	ldi	r19, 0x00	; 0
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == 0x02)
			{
				Address = &ProductString;
    78dc:	82 e0       	ldi	r24, 0x02	; 2
    78de:	91 e0       	ldi	r25, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
    78e0:	fa 01       	movw	r30, r20
    78e2:	91 83       	std	Z+1, r25	; 0x01
    78e4:	80 83       	st	Z, r24
	return Size;
}
    78e6:	c9 01       	movw	r24, r18
    78e8:	08 95       	ret

000078ea <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
    78ea:	07 b6       	in	r0, 0x37	; 55
    78ec:	00 fc       	sbrc	r0, 0
    78ee:	fd cf       	rjmp	.-6      	; 0x78ea <BootloaderAPI_ErasePage>
    78f0:	f9 99       	sbic	0x1f, 1	; 31
    78f2:	fe cf       	rjmp	.-4      	; 0x78f0 <BootloaderAPI_ErasePage+0x6>
    78f4:	23 e0       	ldi	r18, 0x03	; 3
    78f6:	fb 01       	movw	r30, r22
    78f8:	20 93 57 00 	sts	0x0057, r18
    78fc:	e8 95       	spm
	boot_spm_busy_wait();
    78fe:	07 b6       	in	r0, 0x37	; 55
    7900:	00 fc       	sbrc	r0, 0
    7902:	fd cf       	rjmp	.-6      	; 0x78fe <BootloaderAPI_ErasePage+0x14>
	boot_rww_enable();
    7904:	81 e1       	ldi	r24, 0x11	; 17
    7906:	80 93 57 00 	sts	0x0057, r24
    790a:	e8 95       	spm
    790c:	08 95       	ret

0000790e <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
    790e:	07 b6       	in	r0, 0x37	; 55
    7910:	00 fc       	sbrc	r0, 0
    7912:	fd cf       	rjmp	.-6      	; 0x790e <BootloaderAPI_WritePage>
    7914:	f9 99       	sbic	0x1f, 1	; 31
    7916:	fe cf       	rjmp	.-4      	; 0x7914 <BootloaderAPI_WritePage+0x6>
    7918:	25 e0       	ldi	r18, 0x05	; 5
    791a:	fb 01       	movw	r30, r22
    791c:	20 93 57 00 	sts	0x0057, r18
    7920:	e8 95       	spm
	boot_spm_busy_wait();
    7922:	07 b6       	in	r0, 0x37	; 55
    7924:	00 fc       	sbrc	r0, 0
    7926:	fd cf       	rjmp	.-6      	; 0x7922 <BootloaderAPI_WritePage+0x14>
	boot_rww_enable();
    7928:	81 e1       	ldi	r24, 0x11	; 17
    792a:	80 93 57 00 	sts	0x0057, r24
    792e:	e8 95       	spm
    7930:	08 95       	ret

00007932 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
    7932:	07 b6       	in	r0, 0x37	; 55
    7934:	00 fc       	sbrc	r0, 0
    7936:	fd cf       	rjmp	.-6      	; 0x7932 <BootloaderAPI_FillWord>
    7938:	f9 99       	sbic	0x1f, 1	; 31
    793a:	fe cf       	rjmp	.-4      	; 0x7938 <BootloaderAPI_FillWord+0x6>
    793c:	21 e0       	ldi	r18, 0x01	; 1
    793e:	fb 01       	movw	r30, r22
    7940:	0a 01       	movw	r0, r20
    7942:	20 93 57 00 	sts	0x0057, r18
    7946:	e8 95       	spm
    7948:	11 24       	eor	r1, r1
    794a:	08 95       	ret

0000794c <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
    794c:	21 e2       	ldi	r18, 0x21	; 33
    794e:	fc 01       	movw	r30, r24
    7950:	20 93 57 00 	sts	0x0057, r18
    7954:	84 91       	lpm	r24, Z+
}
    7956:	08 95       	ret

00007958 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
    7958:	29 e0       	ldi	r18, 0x09	; 9
    795a:	fc 01       	movw	r30, r24
    795c:	20 93 57 00 	sts	0x0057, r18
    7960:	84 91       	lpm	r24, Z+
}
    7962:	08 95       	ret

00007964 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
    7964:	e1 e0       	ldi	r30, 0x01	; 1
    7966:	f0 e0       	ldi	r31, 0x00	; 0
    7968:	89 e0       	ldi	r24, 0x09	; 9
    796a:	80 93 57 00 	sts	0x0057, r24
    796e:	84 91       	lpm	r24, Z+
}
    7970:	08 95       	ret

00007972 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
    7972:	07 b6       	in	r0, 0x37	; 55
    7974:	00 fc       	sbrc	r0, 0
    7976:	fd cf       	rjmp	.-6      	; 0x7972 <BootloaderAPI_WriteLock>
    7978:	f9 99       	sbic	0x1f, 1	; 31
    797a:	fe cf       	rjmp	.-4      	; 0x7978 <BootloaderAPI_WriteLock+0x6>
    797c:	80 95       	com	r24
    797e:	99 e0       	ldi	r25, 0x09	; 9
    7980:	e1 e0       	ldi	r30, 0x01	; 1
    7982:	f0 e0       	ldi	r31, 0x00	; 0
    7984:	08 2e       	mov	r0, r24
    7986:	90 93 57 00 	sts	0x0057, r25
    798a:	e8 95       	spm
    798c:	08 95       	ret

0000798e <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    798e:	40 91 7d 01 	lds	r20, 0x017D
    7992:	50 91 7e 01 	lds	r21, 0x017E
    7996:	46 17       	cp	r20, r22
    7998:	57 07       	cpc	r21, r23
    799a:	48 f0       	brcs	.+18     	; 0x79ae <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    799c:	61 15       	cp	r22, r1
    799e:	71 05       	cpc	r23, r1
    79a0:	39 f4       	brne	.+14     	; 0x79b0 <Endpoint_Write_Control_Stream_LE+0x22>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    79a2:	40 91 e8 00 	lds	r20, 0x00E8
    79a6:	4e 7f       	andi	r20, 0xFE	; 254
    79a8:	40 93 e8 00 	sts	0x00E8, r20
    79ac:	01 c0       	rjmp	.+2      	; 0x79b0 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    79ae:	ba 01       	movw	r22, r20
    79b0:	fc 01       	movw	r30, r24
    79b2:	40 e0       	ldi	r20, 0x00	; 0
    79b4:	32 c0       	rjmp	.+100    	; 0x7a1a <Endpoint_Write_Control_Stream_LE+0x8c>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    79b6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    79b8:	88 23       	and	r24, r24
    79ba:	09 f4       	brne	.+2      	; 0x79be <Endpoint_Write_Control_Stream_LE+0x30>
    79bc:	41 c0       	rjmp	.+130    	; 0x7a40 <Endpoint_Write_Control_Stream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    79be:	85 30       	cpi	r24, 0x05	; 5
    79c0:	09 f4       	brne	.+2      	; 0x79c4 <Endpoint_Write_Control_Stream_LE+0x36>
    79c2:	40 c0       	rjmp	.+128    	; 0x7a44 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    79c4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    79c8:	83 fd       	sbrc	r24, 3
    79ca:	38 c0       	rjmp	.+112    	; 0x7a3c <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    79cc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    79d0:	82 fd       	sbrc	r24, 2
    79d2:	2e c0       	rjmp	.+92     	; 0x7a30 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    79d4:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    79d8:	80 ff       	sbrs	r24, 0
    79da:	1f c0       	rjmp	.+62     	; 0x7a1a <Endpoint_Write_Control_Stream_LE+0x8c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    79dc:	90 91 f3 00 	lds	r25, 0x00F3
    79e0:	80 91 f2 00 	lds	r24, 0x00F2
    79e4:	39 2f       	mov	r19, r25
    79e6:	20 e0       	ldi	r18, 0x00	; 0
    79e8:	a9 01       	movw	r20, r18
    79ea:	48 2b       	or	r20, r24
    79ec:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    79ee:	06 c0       	rjmp	.+12     	; 0x79fc <Endpoint_Write_Control_Stream_LE+0x6e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    79f0:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    79f2:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    79f6:	61 50       	subi	r22, 0x01	; 1
    79f8:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    79fa:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    79fc:	61 15       	cp	r22, r1
    79fe:	71 05       	cpc	r23, r1
    7a00:	19 f0       	breq	.+6      	; 0x7a08 <Endpoint_Write_Control_Stream_LE+0x7a>
    7a02:	80 32       	cpi	r24, 0x20	; 32
    7a04:	91 05       	cpc	r25, r1
    7a06:	a0 f3       	brcs	.-24     	; 0x79f0 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    7a08:	41 e0       	ldi	r20, 0x01	; 1
    7a0a:	80 97       	sbiw	r24, 0x20	; 32
    7a0c:	09 f0       	breq	.+2      	; 0x7a10 <Endpoint_Write_Control_Stream_LE+0x82>
    7a0e:	40 e0       	ldi	r20, 0x00	; 0
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    7a10:	80 91 e8 00 	lds	r24, 0x00E8
    7a14:	8e 7f       	andi	r24, 0xFE	; 254
    7a16:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7a1a:	61 15       	cp	r22, r1
    7a1c:	71 05       	cpc	r23, r1
    7a1e:	59 f6       	brne	.-106    	; 0x79b6 <Endpoint_Write_Control_Stream_LE+0x28>
    7a20:	41 11       	cpse	r20, r1
    7a22:	c9 cf       	rjmp	.-110    	; 0x79b6 <Endpoint_Write_Control_Stream_LE+0x28>
    7a24:	05 c0       	rjmp	.+10     	; 0x7a30 <Endpoint_Write_Control_Stream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7a26:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7a28:	88 23       	and	r24, r24
    7a2a:	51 f0       	breq	.+20     	; 0x7a40 <Endpoint_Write_Control_Stream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7a2c:	85 30       	cpi	r24, 0x05	; 5
    7a2e:	51 f0       	breq	.+20     	; 0x7a44 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7a30:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7a34:	82 ff       	sbrs	r24, 2
    7a36:	f7 cf       	rjmp	.-18     	; 0x7a26 <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7a38:	80 e0       	ldi	r24, 0x00	; 0
    7a3a:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7a3c:	81 e0       	ldi	r24, 0x01	; 1
    7a3e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7a40:	82 e0       	ldi	r24, 0x02	; 2
    7a42:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7a44:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7a46:	08 95       	ret

00007a48 <Endpoint_ConfigureEndpoint_Prv>:
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    7a48:	eb ee       	ldi	r30, 0xEB	; 235
    7a4a:	f0 e0       	ldi	r31, 0x00	; 0
    7a4c:	80 81       	ld	r24, Z
    7a4e:	81 60       	ori	r24, 0x01	; 1
    7a50:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    7a52:	ed ee       	ldi	r30, 0xED	; 237
    7a54:	f0 e0       	ldi	r31, 0x00	; 0
    7a56:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    7a58:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    7a5c:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    7a5e:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    7a62:	88 1f       	adc	r24, r24
    7a64:	88 27       	eor	r24, r24
    7a66:	88 1f       	adc	r24, r24
    7a68:	08 95       	ret

00007a6a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    7a6a:	80 91 77 01 	lds	r24, 0x0177
    7a6e:	87 fd       	sbrc	r24, 7
    7a70:	05 c0       	rjmp	.+10     	; 0x7a7c <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7a72:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    7a76:	80 ff       	sbrs	r24, 0
    7a78:	0d c0       	rjmp	.+26     	; 0x7a94 <Endpoint_ClearStatusStage+0x2a>
    7a7a:	10 c0       	rjmp	.+32     	; 0x7a9c <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7a7c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    7a80:	82 fd       	sbrc	r24, 2
    7a82:	04 c0       	rjmp	.+8      	; 0x7a8c <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7a84:	8e b3       	in	r24, 0x1e	; 30
    7a86:	81 11       	cpse	r24, r1
    7a88:	f9 cf       	rjmp	.-14     	; 0x7a7c <Endpoint_ClearStatusStage+0x12>
    7a8a:	08 95       	ret
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    7a8c:	80 91 e8 00 	lds	r24, 0x00E8
    7a90:	8b 7f       	andi	r24, 0xFB	; 251
    7a92:	07 c0       	rjmp	.+14     	; 0x7aa2 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7a94:	8e b3       	in	r24, 0x1e	; 30
    7a96:	81 11       	cpse	r24, r1
    7a98:	ec cf       	rjmp	.-40     	; 0x7a72 <Endpoint_ClearStatusStage+0x8>
    7a9a:	08 95       	ret
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    7a9c:	80 91 e8 00 	lds	r24, 0x00E8
    7aa0:	8e 7f       	andi	r24, 0xFE	; 254
    7aa2:	80 93 e8 00 	sts	0x00E8, r24
    7aa6:	08 95       	ret

00007aa8 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    7aa8:	62 d0       	rcall	.+196    	; 0x7b6e <USB_INT_DisableAllInterrupts>
    7aaa:	69 d0       	rcall	.+210    	; 0x7b7e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7aac:	e0 ee       	ldi	r30, 0xE0	; 224
    7aae:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    7ab0:	80 81       	ld	r24, Z
    7ab2:	81 60       	ori	r24, 0x01	; 1
    7ab4:	80 83       	st	Z, r24
    7ab6:	e8 ed       	ldi	r30, 0xD8	; 216
    7ab8:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    7aba:	80 81       	ld	r24, Z
    7abc:	8f 77       	andi	r24, 0x7F	; 127
    7abe:	80 83       	st	Z, r24
    7ac0:	19 bc       	out	0x29, r1	; 41
    7ac2:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7ac4:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    7ac6:	8c 91       	ld	r24, X
    7ac8:	8e 7f       	andi	r24, 0xFE	; 254
    7aca:	8c 93       	st	X, r24
    7acc:	80 81       	ld	r24, Z
    7ace:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    7ad0:	80 83       	st	Z, r24
    7ad2:	10 92 76 01 	sts	0x0176, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    7ad6:	08 95       	ret

00007ad8 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    7ad8:	0f 93       	push	r16
    7ada:	1f 93       	push	r17
    7adc:	cf 93       	push	r28
    7ade:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    7ae0:	46 d0       	rcall	.+140    	; 0x7b6e <USB_INT_DisableAllInterrupts>
    7ae2:	4d d0       	rcall	.+154    	; 0x7b7e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7ae4:	c8 ed       	ldi	r28, 0xD8	; 216
    7ae6:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    7ae8:	88 81       	ld	r24, Y
    7aea:	8f 77       	andi	r24, 0x7F	; 127
    7aec:	88 83       	st	Y, r24
    7aee:	88 81       	ld	r24, Y
    7af0:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    7af2:	88 83       	st	Y, r24
    7af4:	88 81       	ld	r24, Y
    7af6:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7af8:	88 83       	st	Y, r24
    7afa:	19 bc       	out	0x29, r1	; 41
    7afc:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7afe:	10 92 75 01 	sts	0x0175, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    7b02:	00 ee       	ldi	r16, 0xE0	; 224
    7b04:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    7b06:	f8 01       	movw	r30, r16
    7b08:	80 81       	ld	r24, Z
    7b0a:	8b 7f       	andi	r24, 0xFB	; 251
    7b0c:	80 83       	st	Z, r24
    7b0e:	88 81       	ld	r24, Y
    7b10:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    7b12:	88 83       	st	Y, r24
    7b14:	42 e2       	ldi	r20, 0x22	; 34
    7b16:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7b18:	80 e0       	ldi	r24, 0x00	; 0
    7b1a:	96 df       	rcall	.-212    	; 0x7a48 <Endpoint_ConfigureEndpoint_Prv>
    7b1c:	e1 ee       	ldi	r30, 0xE1	; 225
    7b1e:	f0 e0       	ldi	r31, 0x00	; 0
    7b20:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7b22:	8e 7f       	andi	r24, 0xFE	; 254
    7b24:	80 83       	st	Z, r24
    7b26:	e2 ee       	ldi	r30, 0xE2	; 226
    7b28:	f0 e0       	ldi	r31, 0x00	; 0
    7b2a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7b2c:	81 60       	ori	r24, 0x01	; 1
    7b2e:	80 83       	st	Z, r24
    7b30:	80 81       	ld	r24, Z
    7b32:	88 60       	ori	r24, 0x08	; 8
    7b34:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    7b36:	f8 01       	movw	r30, r16
    7b38:	80 81       	ld	r24, Z
    7b3a:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    7b3c:	80 83       	st	Z, r24
    7b3e:	88 81       	ld	r24, Y
    7b40:	80 61       	ori	r24, 0x10	; 16
    7b42:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    7b44:	df 91       	pop	r29
    7b46:	cf 91       	pop	r28
    7b48:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    7b4a:	0f 91       	pop	r16
    7b4c:	08 95       	ret

00007b4e <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    7b4e:	e8 ed       	ldi	r30, 0xD8	; 216
    7b50:	f0 e0       	ldi	r31, 0x00	; 0
    7b52:	80 81       	ld	r24, Z
    7b54:	8f 7e       	andi	r24, 0xEF	; 239
    7b56:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    7b58:	e7 ed       	ldi	r30, 0xD7	; 215
    7b5a:	f0 e0       	ldi	r31, 0x00	; 0
    7b5c:	80 81       	ld	r24, Z
    7b5e:	81 60       	ori	r24, 0x01	; 1
    7b60:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    7b62:	84 e0       	ldi	r24, 0x04	; 4
    7b64:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    7b66:	81 e0       	ldi	r24, 0x01	; 1
    7b68:	80 93 76 01 	sts	0x0176, r24

	USB_ResetInterface();
    7b6c:	b5 cf       	rjmp	.-150    	; 0x7ad8 <USB_ResetInterface>

00007b6e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    7b6e:	e8 ed       	ldi	r30, 0xD8	; 216
    7b70:	f0 e0       	ldi	r31, 0x00	; 0
    7b72:	80 81       	ld	r24, Z
    7b74:	8e 7f       	andi	r24, 0xFE	; 254
    7b76:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    7b78:	10 92 e2 00 	sts	0x00E2, r1
    7b7c:	08 95       	ret

00007b7e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    7b7e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7b82:	10 92 e1 00 	sts	0x00E1, r1
    7b86:	08 95       	ret

00007b88 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    7b88:	1f 92       	push	r1
    7b8a:	0f 92       	push	r0
    7b8c:	0f b6       	in	r0, 0x3f	; 63
    7b8e:	0f 92       	push	r0
    7b90:	11 24       	eor	r1, r1
    7b92:	2f 93       	push	r18
    7b94:	3f 93       	push	r19
    7b96:	4f 93       	push	r20
    7b98:	5f 93       	push	r21
    7b9a:	6f 93       	push	r22
    7b9c:	7f 93       	push	r23
    7b9e:	8f 93       	push	r24
    7ba0:	9f 93       	push	r25
    7ba2:	af 93       	push	r26
    7ba4:	bf 93       	push	r27
    7ba6:	ef 93       	push	r30
    7ba8:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    7baa:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    7bae:	80 ff       	sbrs	r24, 0
    7bb0:	19 c0       	rjmp	.+50     	; 0x7be4 <__vector_10+0x5c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    7bb2:	80 91 d8 00 	lds	r24, 0x00D8
    7bb6:	80 ff       	sbrs	r24, 0
    7bb8:	15 c0       	rjmp	.+42     	; 0x7be4 <__vector_10+0x5c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    7bba:	80 91 da 00 	lds	r24, 0x00DA
    7bbe:	8e 7f       	andi	r24, 0xFE	; 254
    7bc0:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    7bc4:	80 91 d9 00 	lds	r24, 0x00D9

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7bc8:	19 bc       	out	0x29, r1	; 41
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    7bca:	80 ff       	sbrs	r24, 0
    7bcc:	09 c0       	rjmp	.+18     	; 0x7be0 <__vector_10+0x58>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7bce:	82 e0       	ldi	r24, 0x02	; 2
    7bd0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    7bd2:	09 b4       	in	r0, 0x29	; 41
    7bd4:	00 fe       	sbrs	r0, 0
    7bd6:	fd cf       	rjmp	.-6      	; 0x7bd2 <__vector_10+0x4a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    7bd8:	81 e0       	ldi	r24, 0x01	; 1
    7bda:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    7bdc:	41 d1       	rcall	.+642    	; 0x7e60 <USB_Event_Stub>
    7bde:	02 c0       	rjmp	.+4      	; 0x7be4 <__vector_10+0x5c>
    7be0:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    7be2:	3e d1       	rcall	.+636    	; 0x7e60 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
    7be4:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    7be8:	80 ff       	sbrs	r24, 0
    7bea:	17 c0       	rjmp	.+46     	; 0x7c1a <__vector_10+0x92>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7bec:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    7bf0:	80 ff       	sbrs	r24, 0
    7bf2:	13 c0       	rjmp	.+38     	; 0x7c1a <__vector_10+0x92>
    7bf4:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7bf8:	8e 7f       	andi	r24, 0xFE	; 254
    7bfa:	80 93 e2 00 	sts	0x00E2, r24
    7bfe:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7c02:	80 61       	ori	r24, 0x10	; 16
    7c04:	80 93 e2 00 	sts	0x00E2, r24
    7c08:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    7c0c:	80 62       	ori	r24, 0x20	; 32
    7c0e:	80 93 d8 00 	sts	0x00D8, r24
    7c12:	19 bc       	out	0x29, r1	; 41
    7c14:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7c16:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7c18:	23 d1       	rcall	.+582    	; 0x7e60 <USB_Event_Stub>
    7c1a:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    7c1e:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7c20:	2b c0       	rjmp	.+86     	; 0x7c78 <__vector_10+0xf0>
    7c22:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7c26:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7c28:	27 c0       	rjmp	.+78     	; 0x7c78 <__vector_10+0xf0>
    7c2a:	19 bc       	out	0x29, r1	; 41
    7c2c:	82 e0       	ldi	r24, 0x02	; 2
    7c2e:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7c30:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7c32:	00 fe       	sbrs	r0, 0
    7c34:	fd cf       	rjmp	.-6      	; 0x7c30 <__vector_10+0xa8>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7c36:	80 91 d8 00 	lds	r24, 0x00D8
    7c3a:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7c3c:	80 93 d8 00 	sts	0x00D8, r24
    7c40:	80 91 e1 00 	lds	r24, 0x00E1
    7c44:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7c46:	80 93 e1 00 	sts	0x00E1, r24
    7c4a:	80 91 e2 00 	lds	r24, 0x00E2
    7c4e:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7c50:	80 93 e2 00 	sts	0x00E2, r24
    7c54:	80 91 e2 00 	lds	r24, 0x00E2
    7c58:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7c5a:	80 93 e2 00 	sts	0x00E2, r24
    7c5e:	80 91 75 01 	lds	r24, 0x0175
    7c62:	81 11       	cpse	r24, r1
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7c64:	04 c0       	rjmp	.+8      	; 0x7c6e <__vector_10+0xe6>
    7c66:	80 91 e3 00 	lds	r24, 0x00E3
    7c6a:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7c6c:	02 c0       	rjmp	.+4      	; 0x7c72 <__vector_10+0xea>
    7c6e:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7c70:	01 c0       	rjmp	.+2      	; 0x7c74 <__vector_10+0xec>
    7c72:	81 e0       	ldi	r24, 0x01	; 1
    7c74:	8e bb       	out	0x1e, r24	; 30
    7c76:	f4 d0       	rcall	.+488    	; 0x7e60 <USB_Event_Stub>
    7c78:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7c7c:	83 ff       	sbrs	r24, 3
    7c7e:	21 c0       	rjmp	.+66     	; 0x7cc2 <__vector_10+0x13a>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7c80:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7c84:	83 ff       	sbrs	r24, 3
    7c86:	1d c0       	rjmp	.+58     	; 0x7cc2 <__vector_10+0x13a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7c88:	80 91 e1 00 	lds	r24, 0x00E1
    7c8c:	87 7f       	andi	r24, 0xF7	; 247
    7c8e:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7c92:	82 e0       	ldi	r24, 0x02	; 2
    7c94:	8e bb       	out	0x1e, r24	; 30
    7c96:	10 92 75 01 	sts	0x0175, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7c9a:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    7c9e:	8e 7f       	andi	r24, 0xFE	; 254
    7ca0:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7ca4:	80 91 e2 00 	lds	r24, 0x00E2
    7ca8:	8e 7f       	andi	r24, 0xFE	; 254
    7caa:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7cae:	80 91 e2 00 	lds	r24, 0x00E2
    7cb2:	80 61       	ori	r24, 0x10	; 16
    7cb4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7cb8:	42 e2       	ldi	r20, 0x22	; 34
    7cba:	60 e0       	ldi	r22, 0x00	; 0
    7cbc:	80 e0       	ldi	r24, 0x00	; 0
    7cbe:	c4 de       	rcall	.-632    	; 0x7a48 <Endpoint_ConfigureEndpoint_Prv>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7cc0:	cf d0       	rcall	.+414    	; 0x7e60 <USB_Event_Stub>
    7cc2:	ff 91       	pop	r31
    7cc4:	ef 91       	pop	r30
    7cc6:	bf 91       	pop	r27
    7cc8:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7cca:	9f 91       	pop	r25
    7ccc:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7cce:	7f 91       	pop	r23
    7cd0:	6f 91       	pop	r22
    7cd2:	5f 91       	pop	r21
    7cd4:	4f 91       	pop	r20
    7cd6:	3f 91       	pop	r19
    7cd8:	2f 91       	pop	r18
    7cda:	0f 90       	pop	r0
    7cdc:	0f be       	out	0x3f, r0	; 63
    7cde:	0f 90       	pop	r0
    7ce0:	1f 90       	pop	r1
    7ce2:	18 95       	reti

00007ce4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7ce4:	1f 93       	push	r17
    7ce6:	cf 93       	push	r28
    7ce8:	df 93       	push	r29
    7cea:	00 d0       	rcall	.+0      	; 0x7cec <USB_Device_ProcessControlRequest+0x8>
    7cec:	cd b7       	in	r28, 0x3d	; 61
    7cee:	de b7       	in	r29, 0x3e	; 62
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    7cf0:	e7 e7       	ldi	r30, 0x77	; 119
    7cf2:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7cf4:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7cf8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7cfa:	81 e0       	ldi	r24, 0x01	; 1
    7cfc:	ef 37       	cpi	r30, 0x7F	; 127
    7cfe:	f8 07       	cpc	r31, r24
    7d00:	c9 f7       	brne	.-14     	; 0x7cf4 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7d02:	94 db       	rcall	.-2264   	; 0x742c <EVENT_USB_Device_ControlRequest>
    7d04:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7d08:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    7d0a:	96 c0       	rjmp	.+300    	; 0x7e38 <USB_Device_ProcessControlRequest+0x154>
    7d0c:	80 91 77 01 	lds	r24, 0x0177
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7d10:	90 91 78 01 	lds	r25, 0x0178

		switch (USB_ControlRequest.bRequest)
    7d14:	96 30       	cpi	r25, 0x06	; 6
    7d16:	09 f4       	brne	.+2      	; 0x7d1a <USB_Device_ProcessControlRequest+0x36>
    7d18:	42 c0       	rjmp	.+132    	; 0x7d9e <USB_Device_ProcessControlRequest+0xba>
    7d1a:	30 f4       	brcc	.+12     	; 0x7d28 <USB_Device_ProcessControlRequest+0x44>
    7d1c:	99 23       	and	r25, r25
    7d1e:	59 f0       	breq	.+22     	; 0x7d36 <USB_Device_ProcessControlRequest+0x52>
    7d20:	95 30       	cpi	r25, 0x05	; 5
    7d22:	09 f0       	breq	.+2      	; 0x7d26 <USB_Device_ProcessControlRequest+0x42>
    7d24:	89 c0       	rjmp	.+274    	; 0x7e38 <USB_Device_ProcessControlRequest+0x154>
    7d26:	16 c0       	rjmp	.+44     	; 0x7d54 <USB_Device_ProcessControlRequest+0x70>
    7d28:	98 30       	cpi	r25, 0x08	; 8
    7d2a:	09 f4       	brne	.+2      	; 0x7d2e <USB_Device_ProcessControlRequest+0x4a>
    7d2c:	58 c0       	rjmp	.+176    	; 0x7dde <USB_Device_ProcessControlRequest+0xfa>
    7d2e:	99 30       	cpi	r25, 0x09	; 9
    7d30:	09 f0       	breq	.+2      	; 0x7d34 <USB_Device_ProcessControlRequest+0x50>
    7d32:	82 c0       	rjmp	.+260    	; 0x7e38 <USB_Device_ProcessControlRequest+0x154>
    7d34:	66 c0       	rjmp	.+204    	; 0x7e02 <USB_Device_ProcessControlRequest+0x11e>
    7d36:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d38:	19 f0       	breq	.+6      	; 0x7d40 <USB_Device_ProcessControlRequest+0x5c>
    7d3a:	82 38       	cpi	r24, 0x82	; 130
    7d3c:	09 f0       	breq	.+2      	; 0x7d40 <USB_Device_ProcessControlRequest+0x5c>
    7d3e:	7c c0       	rjmp	.+248    	; 0x7e38 <USB_Device_ProcessControlRequest+0x154>
    7d40:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d44:	87 7f       	andi	r24, 0xF7	; 247
    7d46:	80 93 e8 00 	sts	0x00E8, r24
    7d4a:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7d4e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    7d52:	50 c0       	rjmp	.+160    	; 0x7df4 <USB_Device_ProcessControlRequest+0x110>
    7d54:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7d56:	70 c0       	rjmp	.+224    	; 0x7e38 <USB_Device_ProcessControlRequest+0x154>
    7d58:	80 91 79 01 	lds	r24, 0x0179
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    7d5c:	90 91 7a 01 	lds	r25, 0x017A
    7d60:	8f 77       	andi	r24, 0x7F	; 127
    7d62:	99 27       	eor	r25, r25
    7d64:	18 2f       	mov	r17, r24
    7d66:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7d6a:	90 78       	andi	r25, 0x80	; 128
    7d6c:	98 2b       	or	r25, r24
    7d6e:	90 93 e3 00 	sts	0x00E3, r25
    7d72:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d76:	87 7f       	andi	r24, 0xF7	; 247
    7d78:	80 93 e8 00 	sts	0x00E8, r24
    7d7c:	76 de       	rcall	.-788    	; 0x7a6a <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7d7e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d82:	80 ff       	sbrs	r24, 0
    7d84:	fc cf       	rjmp	.-8      	; 0x7d7e <USB_Device_ProcessControlRequest+0x9a>

	while (!(Endpoint_IsINReady()));
    7d86:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    7d8a:	80 68       	ori	r24, 0x80	; 128
    7d8c:	80 93 e3 00 	sts	0x00E3, r24
    7d90:	11 23       	and	r17, r17
    7d92:	11 f0       	breq	.+4      	; 0x7d98 <USB_Device_ProcessControlRequest+0xb4>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7d94:	83 e0       	ldi	r24, 0x03	; 3
    7d96:	01 c0       	rjmp	.+2      	; 0x7d9a <USB_Device_ProcessControlRequest+0xb6>
    7d98:	82 e0       	ldi	r24, 0x02	; 2
    7d9a:	8e bb       	out	0x1e, r24	; 30
    7d9c:	4d c0       	rjmp	.+154    	; 0x7e38 <USB_Device_ProcessControlRequest+0x154>
    7d9e:	80 58       	subi	r24, 0x80	; 128
    7da0:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7da2:	08 f0       	brcs	.+2      	; 0x7da6 <USB_Device_ProcessControlRequest+0xc2>
    7da4:	49 c0       	rjmp	.+146    	; 0x7e38 <USB_Device_ProcessControlRequest+0x154>
    7da6:	ae 01       	movw	r20, r28
    7da8:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7daa:	5f 4f       	sbci	r21, 0xFF	; 255
    7dac:	60 91 7b 01 	lds	r22, 0x017B
    7db0:	80 91 79 01 	lds	r24, 0x0179
    7db4:	90 91 7a 01 	lds	r25, 0x017A
    7db8:	63 dd       	rcall	.-1338   	; 0x7880 <CALLBACK_USB_GetDescriptor>
    7dba:	00 97       	sbiw	r24, 0x00	; 0
    7dbc:	09 f4       	brne	.+2      	; 0x7dc0 <USB_Device_ProcessControlRequest+0xdc>
    7dbe:	3c c0       	rjmp	.+120    	; 0x7e38 <USB_Device_ProcessControlRequest+0x154>
    7dc0:	20 91 e8 00 	lds	r18, 0x00E8
    7dc4:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7dc6:	20 93 e8 00 	sts	0x00E8, r18
    7dca:	bc 01       	movw	r22, r24
    7dcc:	89 81       	ldd	r24, Y+1	; 0x01
    7dce:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7dd0:	de dd       	rcall	.-1092   	; 0x798e <Endpoint_Write_Control_Stream_LE>
    7dd2:	80 91 e8 00 	lds	r24, 0x00E8
    7dd6:	8b 7f       	andi	r24, 0xFB	; 251
    7dd8:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    7ddc:	2d c0       	rjmp	.+90     	; 0x7e38 <USB_Device_ProcessControlRequest+0x154>
    7dde:	80 38       	cpi	r24, 0x80	; 128
    7de0:	59 f5       	brne	.+86     	; 0x7e38 <USB_Device_ProcessControlRequest+0x154>
    7de2:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7de6:	87 7f       	andi	r24, 0xF7	; 247
    7de8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7dec:	80 91 75 01 	lds	r24, 0x0175
    7df0:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7df4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7df8:	8e 7f       	andi	r24, 0xFE	; 254
    7dfa:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    7dfe:	35 de       	rcall	.-918    	; 0x7a6a <Endpoint_ClearStatusStage>
    7e00:	1b c0       	rjmp	.+54     	; 0x7e38 <USB_Device_ProcessControlRequest+0x154>
    7e02:	81 11       	cpse	r24, r1
    7e04:	19 c0       	rjmp	.+50     	; 0x7e38 <USB_Device_ProcessControlRequest+0x154>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7e06:	90 91 79 01 	lds	r25, 0x0179
    7e0a:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7e0c:	a8 f4       	brcc	.+42     	; 0x7e38 <USB_Device_ProcessControlRequest+0x154>
    7e0e:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7e12:	87 7f       	andi	r24, 0xF7	; 247
    7e14:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e18:	90 93 75 01 	sts	0x0175, r25
    7e1c:	26 de       	rcall	.-948    	; 0x7a6a <Endpoint_ClearStatusStage>
    7e1e:	80 91 75 01 	lds	r24, 0x0175
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7e22:	81 11       	cpse	r24, r1
    7e24:	04 c0       	rjmp	.+8      	; 0x7e2e <USB_Device_ProcessControlRequest+0x14a>

	Endpoint_ClearStatusStage();
    7e26:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    7e2a:	87 ff       	sbrs	r24, 7
    7e2c:	02 c0       	rjmp	.+4      	; 0x7e32 <USB_Device_ProcessControlRequest+0x14e>
    7e2e:	84 e0       	ldi	r24, 0x04	; 4
    7e30:	01 c0       	rjmp	.+2      	; 0x7e34 <USB_Device_ProcessControlRequest+0x150>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7e32:	81 e0       	ldi	r24, 0x01	; 1
    7e34:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7e36:	14 d0       	rcall	.+40     	; 0x7e60 <USB_Event_Stub>
    7e38:	80 91 e8 00 	lds	r24, 0x00E8
    7e3c:	83 ff       	sbrs	r24, 3
    7e3e:	0a c0       	rjmp	.+20     	; 0x7e54 <USB_Device_ProcessControlRequest+0x170>
    7e40:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    7e44:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e46:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7e4a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e4e:	80 62       	ori	r24, 0x20	; 32
    7e50:	80 93 eb 00 	sts	0x00EB, r24
    7e54:	0f 90       	pop	r0
    7e56:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7e58:	df 91       	pop	r29
    7e5a:	cf 91       	pop	r28
    7e5c:	1f 91       	pop	r17
    7e5e:	08 95       	ret

00007e60 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    7e60:	08 95       	ret

00007e62 <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    7e62:	8e b3       	in	r24, 0x1e	; 30
    7e64:	88 23       	and	r24, r24
    7e66:	21 f0       	breq	.+8      	; 0x7e70 <USB_USBTask+0xe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e68:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    7e6c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    7e6e:	3a cf       	rjmp	.-396    	; 0x7ce4 <USB_Device_ProcessControlRequest>
    7e70:	08 95       	ret

00007e72 <__eerd_byte_m32u4>:
    7e72:	f9 99       	sbic	0x1f, 1	; 31
    7e74:	fe cf       	rjmp	.-4      	; 0x7e72 <__eerd_byte_m32u4>
    7e76:	92 bd       	out	0x22, r25	; 34
    7e78:	81 bd       	out	0x21, r24	; 33
    7e7a:	f8 9a       	sbi	0x1f, 0	; 31
    7e7c:	99 27       	eor	r25, r25
    7e7e:	80 b5       	in	r24, 0x20	; 32
    7e80:	08 95       	ret

00007e82 <__eewr_byte_m32u4>:
    7e82:	26 2f       	mov	r18, r22

00007e84 <__eewr_r18_m32u4>:
    7e84:	f9 99       	sbic	0x1f, 1	; 31
    7e86:	fe cf       	rjmp	.-4      	; 0x7e84 <__eewr_r18_m32u4>
    7e88:	1f ba       	out	0x1f, r1	; 31
    7e8a:	92 bd       	out	0x22, r25	; 34
    7e8c:	81 bd       	out	0x21, r24	; 33
    7e8e:	20 bd       	out	0x20, r18	; 32
    7e90:	0f b6       	in	r0, 0x3f	; 63
    7e92:	f8 94       	cli
    7e94:	fa 9a       	sbi	0x1f, 2	; 31
    7e96:	f9 9a       	sbi	0x1f, 1	; 31
    7e98:	0f be       	out	0x3f, r0	; 63
    7e9a:	01 96       	adiw	r24, 0x01	; 1
    7e9c:	08 95       	ret

00007e9e <_exit>:
    7e9e:	f8 94       	cli

00007ea0 <__stop_program>:
    7ea0:	ff cf       	rjmp	.-2      	; 0x7ea0 <__stop_program>

Disassembly of section .apitable_trampolines:

00007fa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
    7fa0:	a4 cc       	rjmp	.-1720   	; 0x78ea <BootloaderAPI_ErasePage>

00007fa2 <BootloaderAPI_WritePage_Trampoline>:
    7fa2:	b5 cc       	rjmp	.-1686   	; 0x790e <BootloaderAPI_WritePage>

00007fa4 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
    7fa4:	c6 cc       	rjmp	.-1652   	; 0x7932 <BootloaderAPI_FillWord>

00007fa6 <BootloaderAPI_ReadSignature_Trampoline>:
    7fa6:	d2 cc       	rjmp	.-1628   	; 0x794c <BootloaderAPI_ReadSignature>

00007fa8 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
    7fa8:	d7 cc       	rjmp	.-1618   	; 0x7958 <BootloaderAPI_ReadFuse>

00007faa <BootloaderAPI_ReadLock_Trampoline>:
    7faa:	dc cc       	rjmp	.-1608   	; 0x7964 <BootloaderAPI_ReadLock>

00007fac <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
    7fac:	e2 cc       	rjmp	.-1596   	; 0x7972 <BootloaderAPI_WriteLock>

00007fae <BootloaderAPU_UNUSED1>:
    7fae:	08 95       	ret

00007fb0 <BootloaderAPU_UNUSED2>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
    7fb0:	08 95       	ret

00007fb2 <BootloaderAPU_UNUSED3>:
    7fb2:	08 95       	ret

00007fb4 <BootloaderAPU_UNUSED4>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
    7fb4:	08 95       	ret

00007fb6 <BootloaderAPU_UNUSED5>:
    7fb6:	08 95       	ret

Disassembly of section .apitable_jumptable:

00007fe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
    7fe0:	df cf       	rjmp	.-66     	; 0x7fa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
    7fe2:	df cf       	rjmp	.-66     	; 0x7fa2 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
    7fe4:	df cf       	rjmp	.-66     	; 0x7fa4 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
    7fe6:	df cf       	rjmp	.-66     	; 0x7fa6 <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
    7fe8:	df cf       	rjmp	.-66     	; 0x7fa8 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
    7fea:	df cf       	rjmp	.-66     	; 0x7faa <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
    7fec:	df cf       	rjmp	.-66     	; 0x7fac <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPU_UNUSED1 ; UNUSED ENTRY 1
    7fee:	df cf       	rjmp	.-66     	; 0x7fae <BootloaderAPU_UNUSED1>
	rjmp BootloaderAPU_UNUSED2 ; UNUSED ENTRY 2
    7ff0:	df cf       	rjmp	.-66     	; 0x7fb0 <BootloaderAPU_UNUSED2>
	rjmp BootloaderAPU_UNUSED3 ; UNUSED ENTRY 3
    7ff2:	df cf       	rjmp	.-66     	; 0x7fb2 <BootloaderAPU_UNUSED3>
	rjmp BootloaderAPU_UNUSED4 ; UNUSED ENTRY 4
    7ff4:	df cf       	rjmp	.-66     	; 0x7fb4 <BootloaderAPU_UNUSED4>
	rjmp BootloaderAPU_UNUSED5 ; UNUSED ENTRY 5
    7ff6:	df cf       	rjmp	.-66     	; 0x7fb6 <BootloaderAPU_UNUSED5>

Disassembly of section .apitable_signatures:

00007ff8 <BootloaderAPI_Signatures>:
    7ff8:	00 70       	andi	r16, 0x00	; 0
    7ffa:	00 00       	nop
    7ffc:	10 df       	rcall	.-480    	; 0x7e1e <USB_Device_ProcessControlRequest+0x13a>
    7ffe:	fb dc       	rcall	.-1546   	; 0x79f6 <Endpoint_Write_Control_Stream_LE+0x68>
